vertex.label = NA,
edge.color = 'black',
vertex.size= rowSums(A),
edge.arrow.size = .4,
layout_nicely(g))
plot(g,
vertex.color = point_est,
vertex.label = NA,
edge.color = 'black',
vertex.size= rowSums(A),
edge.arrow.size = .4,
layout_nicely(g))
plot(g,
vertex.color = point_est,
vertex.label = NA,
edge.color = 'black',
vertex.size= rowSums(A)/N,
edge.arrow.size = .4,
layout_nicely(g))
plot(g,
vertex.color = point_est,
vertex.label = NA,
edge.color = 'black',
vertex.size= rowSums(A)/100,
edge.arrow.size = .4,
layout_nicely(g))
plot(g,
vertex.color = point_est,
vertex.label = NA,
edge.color = 'black',
vertex.size= rowSums(A)/100,
edge.arrow.size = .4)
plot(g,
vertex.color = point_est2,
vertex.label = NA,
edge.color = 'black',
vertex.size= rowSums(A)/100,
edge.arrow.size = .4)
plot(g,
vertex.color = point_est,
vertex.label = NA,
edge.color = 'black',
vertex.size= rowSums(A),
edge.arrow.size = .4)
plot(g,
vertex.color = point_est,
vertex.label = NA,
edge.color = 'black',
vertex.size= rowSums(A)/100,
edge.arrow.size = .4)
plot(g,
vertex.color = point_est,
vertex.label = NA,
edge.color = 'black',
vertex.size= rowSums(A)/10,
edge.arrow.size = .4)
plot(g,
vertex.color = point_est,
vertex.label = NA,
edge.color = 'black',
vertex.size= rowSums(A)/2,
edge.arrow.size = .4)
plot(g,
vertex.color = point_est2,
vertex.label = NA,
edge.color = 'black',
vertex.size= rowSums(A)/2,
edge.arrow.size = .4)
plot(g,
vertex.color = point_est2,
vertex.label = NA,
edge.color = 'black',
vertex.size= rowSums(A)/2,
edge.arrow.size = .1)
g_df =  data.frame(vertex_attr(g)) %>%
rename( player_slug= name) %>%
left_join(players_df, by="player_slug")
head(g_df)
ggplot(g_df, aes(x=rank_number, y=log(rank_number), col=as.factor(cluster)))+
geom_point()
res = MCMC_POMM_Estimation(N_iter = 20000,K_true = 3,n_ij_matrix = B, y_ij_matrix =   A, beta_max = beta_max)
label_switch = label.switching(method = "DATA-BASED",z = t(res$z),K = 3, data=rowSums(A))
point_est2 = as.vector(label_switch$clusters)
g <- set_vertex_attr(g, "cluster", value = point_est2)
plot(g,
vertex.color = point_est2,
vertex.label = NA,
edge.color = 'black',
vertex.size= rowSums(A)/2,
edge.arrow.size = .1)
g_df =  data.frame(vertex_attr(g)) %>%
rename( player_slug= name) %>%
left_join(players_df, by="player_slug")
head(g_df)
ggplot(g_df, aes(x=rank_number, y=log(rank_number), col=as.factor(cluster)))+
geom_point()
z_burn = z[,-c(1:10000)]
z_burn = res$z[,-c(1:10000)]
label_switch = label.switching(method = "DATA-BASED",z = t(z_burn),K = 3, data=rowSums(A))
point_est2 = as.vector(label_switch$clusters)
g <- set_vertex_attr(g, "cluster", value = point_est2)
plot(g,
vertex.color = point_est2,
vertex.label = NA,
edge.color = 'black',
vertex.size= rowSums(A)/2,
edge.arrow.size = .1)
g_df =  data.frame(vertex_attr(g)) %>%
rename( player_slug= name) %>%
left_join(players_df, by="player_slug")
head(g_df)
ggplot(g_df, aes(x=rank_number, y=log(rank_number), col=as.factor(cluster)))+
geom_point()
ggplot(g_df, aes(x = player_slug, y = cluster, color = factor(cluster))) +
geom_point(size = 3) +
labs(x = "Player Name", y = "Cluster") +
scale_color_discrete(name = "Cluster") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(g_df, aes(x = cluster)) +
geom_bar(aes(fill =factor(cluster)) )+
scale_fill_manual(values = rainbow(max(g_df$cluster))) +
scale_x_discrete()+
xlab("Cluster") +
ylab("Count") +
ggtitle("Player Distribution by Cluster")
ggplot(g_df, aes(x = rank_number)) +
geom_bar(aes(fill =factor(cluster)) )+
scale_fill_manual(values = rainbow(max(g_df$cluster))) +
scale_x_discrete()+
scale_y_discrete()+
xlab("Cluster") +
ylab("Count") +
ggtitle("Player Ranking by Cluster")
ggplot(g_df, aes(x = player_slug, y = cluster, color = factor(cluster))) +
geom_point(data = g_df, aes(size = rank_number)) +
geom_text(data = cluster1_data, aes(label = player_slug), angle = 90, hjust=-.1, vjust =1.5, size = 3) +
scale_color_discrete(name = "Cluster") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 3))
#estimates
similarity_matrix_simple = pr_cc(res_simple$z[,-c(1:10000*0.5)])
#estimates
similarity_matrix = pr_cc(z_burn)
point_est = minVI(similarity_matrix)$cl
similarity_plot(A,point_est,point_est)
similarity_plot(similarity_matrix,point_est,point_est)
similarity_plot(similarity_matrix,point_est2,point_est2)
similarity_plot(A,point_est,point_est2)
similarity_plot(A,point_est2,point_est2)
similarity_plot(A,point_est2_simple,point_est2_simple)
similarity_plot(similarity_matrix,point_est2_simple,point_est2_simple)
res_simple = MCMC_simple_model_Estimation(N_iter = 20000,K_true = 3,n_ij_matrix = B, y_ij_matrix =   A)
z_burn_simple = res_simple$z[,-c(1:10000)]
label_switch_simple = label.switching(method = "DATA-BASED",z = t(z_burn_simple),K = 3, data=rowSums(A))
point_est2_simple = as.vector(label_switch_simple$clusters)
permute.mcmc(t(z_burn_simple,label_switch_simple$permutations))
permute.mcmc(t(z_burn_simple),label_switch_simple$permutations)
permute.mcmc(t(z_burn_simple),label_switch_simple$permutations$`DATA-BASED`)
#estimates
similarity_matrix_simple = pr_cc(z_burn_simple)
adj.rand.index(point_est2_simple,point_est2)
plotting_graphs(A, point_est2_simple, rowSums(A))
similarity_plot(A,point_est2_simple,point_est2_simple)
similarity_plot(similarity_matrix,point_est2_simple,point_est2_simple)
g_simple <- set_vertex_attr(g, "cluster", value = point_est_simple)
g_simple <- set_vertex_attr(g, "cluster", value = point_est2_simple)
plot(g_simple,
vertex.color = point_est2_simple,
vertex.label = NA,
edge.color = 'black',
edge.arrow.size = 0.05)
g_df_simple =  data.frame(vertex_attr(g_simple)) %>%
rename( player_slug= name) %>%
left_join(players_df, by="player_slug")
ggplot(g_df_simple, aes(x=rank_number, y=log(rank_number), col=as.factor(cluster)))+
geom_point()
g_simple <- set_vertex_attr(g, "cluster", value = point_est2_simple)
plot(g_simple,
vertex.color = point_est2_simple,
vertex.label = NA,
edge.color = 'black',
edge.arrow.size = 0.05)
g_df_simple =  data.frame(vertex_attr(g_simple)) %>%
rename( player_slug= name) %>%
left_join(players_df, by="player_slug")
g_df_simple
ggplot(g_df_simple, aes(x=rank_number, y=log(rank_number), col=as.factor(cluster)))+
geom_point()
ggplot(g_df_simple, aes(x = player_slug, y = cluster, color = factor(cluster))) +
geom_point(size = 3) +
labs(x = "Player Name", y = "Cluster") +
scale_color_discrete(name = "Cluster") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
cluster1_data <- subset(g_df_simple, cluster == 3)
ggplot(g_df_simple, aes(x = player_slug, y = cluster, color = factor(cluster))) +
geom_point(data = g_df_simple, aes(size = rank_number)) +
geom_text(data = cluster1_data, aes(label = player_slug), angle = 90, hjust=-.1, vjust =1.5, size = 3) +
scale_color_discrete(name = "Cluster") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 3))
ggplot(g_df_simple, aes(x = player_slug, y = cluster, color = factor(cluster))) +
geom_point(data = g_df_simple, aes(size = rank_number)) +
geom_text(data = cluster1_data, aes(label = player_slug), angle = 90, hjust=-.1, vjust =1.5, size = 3) +
scale_color_discrete(name = "Cluster") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 2, size = 3))
ggplot(g_df_simple, aes(x = player_slug, y = cluster, color = factor(cluster))) +
geom_point(data = g_df_simple, aes(size = rank_number)) +
geom_text(data = cluster1_data, aes(label = player_slug), angle = 90, hjust=-.1, vjust =1.5, size = 3) +
scale_color_discrete(name = "Cluster") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = -1, size = 3))
ggplot(g_df_simple, aes(x = player_slug, y = cluster, color = factor(cluster))) +
geom_point(data = g_df_simple, aes(size = rank_number)) +
geom_text(data = cluster1_data, aes(label = player_slug), angle = 90, hjust=1, vjust =1.5, size = 3) +
scale_color_discrete(name = "Cluster") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 3))
ggplot(g_df_simple, aes(x = cluster)) +
geom_bar(aes(fill =factor(cluster)) )+
scale_fill_manual(values = rainbow(max(g_df_simple$cluster))) +
scale_x_discrete()+
xlab("Cluster") +
ylab("Count") +
ggtitle("Player Distribution by Cluster")
ggplot(g_df_simple, aes(x = rank_number)) +
geom_bar(aes(fill =factor(cluster)) )+
scale_fill_manual(values = rainbow(max(g_df_simple$cluster))) +
scale_x_discrete()+
scale_y_discrete()+
xlab("Cluster") +
ylab("Count") +
ggtitle("Player Ranking by Cluster")
ggplot(g_df, aes(x = player_slug, y = cluster, color = factor(cluster))) +
geom_point(size = 3) +
labs(x = "Player Name", y = "Cluster") +
scale_color_discrete(name = "Cluster") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
cluster1_data <- subset(g_df, cluster == 1)
ggplot(g_df, aes(x = player_slug, y = cluster, color = factor(cluster))) +
geom_point(data = g_df, aes(size = rank_number)) +
geom_text(data = cluster1_data, aes(label = player_slug), angle = 90, hjust=-.1, vjust =1.5, size = 3) +
scale_color_discrete(name = "Cluster") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 3))
ggplot(g_df, aes(x = cluster)) +
geom_bar(aes(fill =factor(cluster)) )+
scale_fill_manual(values = rainbow(max(g_df$cluster))) +
scale_x_discrete()+
xlab("Cluster") +
ylab("Count") +
ggtitle("Player Distribution by Cluster")
ggplot(g_df, aes(x = rank_number)) +
geom_bar(aes(fill =factor(cluster)) )+
scale_fill_manual(values = rainbow(max(g_df$cluster))) +
scale_x_discrete()+
scale_y_discrete()+
xlab("Cluster") +
ylab("Count") +
ggtitle("Player Ranking by Cluster")
ggplot(g_df, aes(x=rank_number, y=log(rank_number), col=as.factor(cluster)))+
geom_point()
g_df_simple =  data.frame(vertex_attr(g_simple)) %>%
rename( player_slug= name) %>%
left_join(players_df, by="player_slug")
ggplot(g_df_simple, aes(x=rank_number, y=log(rank_number), col=as.factor(cluster)))+
geom_point()
similarity_plot(A,point_est2_simple,point_est2_simple)
similarity_plot(A,point_est2_simple,point_est2_simple)
similarity_plot(similarity_matrix,point_est2_simple,point_est2_simple)
similarity_plot(A,point_est2,point_est2)
similarity_plot(A,point_est2_simple,point_est2_simple)
similarity_plot(similarity_matrix,point_est2_simple,point_est2_simple)
similarity_plot(A,point_est2_simple,point_est2_simple)
ggplot(g_df_simple, aes(x = rank_number)) +
geom_bar(aes(fill =factor(cluster)) )+
scale_fill_manual(values = rainbow(max(g_df_simple$cluster))) +
scale_x_discrete()+
scale_y_discrete()+
xlab("Cluster") +
ylab("Count") +
ggtitle("Player Ranking by Cluster")
ggplot(g_df_simple, aes(x = cluster)) +
geom_bar(aes(fill =factor(cluster)) )+
scale_fill_manual(values = rainbow(max(g_df_simple$cluster))) +
scale_x_discrete()+
xlab("Cluster") +
ylab("Count") +
ggtitle("Player Distribution by Cluster")
ggplot(g_df_simple, aes(x = player_slug, y = cluster, color = factor(cluster))) +
geom_point(data = g_df_simple, aes(size = rank_number)) +
geom_text(data = cluster1_data, aes(label = player_slug), angle = 90, hjust=1, vjust =1.5, size = 3) +
scale_color_discrete(name = "Cluster") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 3))
cluster1_data <- subset(g_df_simple, cluster == 1)
ggplot(g_df_simple, aes(x = player_slug, y = cluster, color = factor(cluster))) +
geom_point(data = g_df_simple, aes(size = rank_number)) +
geom_text(data = cluster1_data, aes(label = player_slug), angle = 90, hjust=-1, vjust =1.5, size = 3) +
scale_color_discrete(name = "Cluster") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 3))
ggplot(g_df_simple, aes(x = player_slug, y = cluster, color = factor(cluster))) +
geom_point(data = g_df_simple, aes(size = rank_number)) +
geom_text(data = cluster1_data, aes(label = player_slug), angle = 90, hjust=-.1, vjust =1.5, size = 3) +
scale_color_discrete(name = "Cluster") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 3))
plot(g_simple,
vertex.color = point_est2_simple,
vertex.label = NA,
edge.color = 'black',
edge.arrow.size = 0.05)
plot(g,
vertex.color = point_est2,
vertex.label = NA,
edge.color = 'black',
vertex.size= rowSums(A)/2,
edge.arrow.size = .1)
plot(g_simple,
vertex.color = point_est2_simple,
vertex.label = NA,
vertex.size = rowSums(A)/2
edge.color = 'black',
plot(g_simple,
vertex.color = point_est2_simple,
vertex.label = NA,
vertex.size = rowSums(A)/2,
edge.color = 'black',
edge.arrow.size = 0.05)
p_proposal
#Hyperparameters
N=100
a=1
b=1
K=3
M=10000
max_clust=3
min_clust= 3
N_iter = 20000
alpha=1
gamma_vec = rep(1,min_clust)
beta_max=.8
set.seed(16)
synth = simulating_tournament_powerlaw_new(N,alpha,beta_max,K, M = M,gamma_vec = gamma_vec,n_ij_max = 6)
source("/Users/lapo_santi/Desktop/Nial/project/simplified model/Functions_priorSST.R")
#Hyperparameters
N=100
a=1
b=1
K=3
M=10000
max_clust=3
min_clust= 3
N_iter = 20000
alpha=1
gamma_vec = rep(1,min_clust)
beta_max=.8
set.seed(16)
synth = simulating_tournament_powerlaw_new(N,alpha,beta_max,K, M = M,gamma_vec = gamma_vec,n_ij_max = 6)
K_true=K
set.seed(16)
source("/Users/lapo_santi/Desktop/Nial/project/simplified model/Functions_priorSST.R")
#Hyperparameters
N=100
a=1
b=1
K=3
M=10000
max_clust=3
min_clust= 3
N_iter = 20000
alpha=1
gamma_vec = rep(1,min_clust)
beta_max=.8
set.seed(16)
synth = simulating_tournament_powerlaw_new(N,alpha,beta_max,K, M = M,gamma_vec = gamma_vec,n_ij_max = 6)
K_true=K
set.seed(16)
synth = simulating_tournament_powerlaw1(N,alpha,beta_max,K, M = M,gamma_vec = gamma_vec,n_ij_max = 6)
source("/Users/lapo_santi/Desktop/Nial/project/simplified model/Functions_priorSST.R")
N_iter = 20000
alpha=1
gamma_vec = rep(1,min_clust)
beta_max=.8
set.seed(16)
synth = simulating_tournament_powerlaw1(N,alpha,beta_max,K, M = M,gamma_vec = gamma_vec,n_ij_max = 6)
synth = simulating_tournament_new(N,alpha,beta_max,K, M = M,gamma_vec = gamma_vec,n_ij_max = 6,)
synth = simulating_tournament_new(N,alpha,beta_max,K, M = M,gamma_vec = gamma_vec,n_ij_max = 6,model = "POMM",diag0.5 = T)
K_true=K
z.true = synth$z_true
labels_available=1:K
n_ij_matrix = synth$n_ij_true
y_ij_matrix= synth$y_ij_true
#selecting just those values such that there is inside a non-0 entry
upper.tri_n_ij = upper.tri(n_ij_matrix)
non_negative_n_ij = which(upper.tri_n_ij & n_ij_matrix > 0, arr.ind = T)
#retrieving the non-0 values
n_ij = n_ij_matrix[p_logical_mat]
p_logical_mat = non_negative_n_ij
#retrieving the non-0 values
n_ij = n_ij_matrix[p_logical_mat]
y_ij = y_ij_matrix[p_logical_mat]
p.true=synth$P_matrix
p_ij_true= synth$p_ij_true[p_logical_mat]
cor(p_ij_true ,y_ij)
table(p_ij_true[non_negative_n_ij]== p_ij_true[p_logical_mat])
maty.n=p_logical_mat
# Convert matrix to long format data.frame
df <- reshape2::melt(maty.n)
names(df) <- c("var1", "var2", "y.n")
# Create heatmap
ggplot(df, aes(x = var2, y = desc(var1), fill = factor(y.n))) +
geom_tile(color = "white") +
scale_fill_manual(values = c("white", "red")) +
labs(x = "", y = "") +
theme_bw()
df_1 = data.frame(cbind(non_negative_n_ij, rep(T,3400)))
names(df_1) <- c("var1", "var2", "y.n")
# Create heatmap
ggplot(df_1, aes(x = var2, y = desc(var1), fill = factor(y.n))) +
geom_tile(color = "white") +
scale_fill_manual(values = c("red")) +
labs(x = "", y = "") +
theme_bw()
#retrieving the non-0 values
n_ij = n_ij_matrix[non_negative_n_ij]
y_ij = y_ij_matrix[non_negative_n_ij]
p_ij_true= synth$p_ij_true[non_negative_n_ij]
#Containers for p
#---
alpha.container = matrix(0,N_iter,1)
p.container = array(0,c(K_true,K_true,N_iter))
#Containers for z
#---
z.container = matrix(0,N,N_iter)
A_seq = matrix(0,N_iter,1)
#Containers for p
#---
alpha.container = matrix(0,N_iter,1)
p.container = array(0,c(K_true,K_true,N_iter))
#Initialization for the z vector
#---
init = kmeans(x = y_ij_matrix,centers =K)$cluster
adj.rand.index(init,z.true)
z_current= init
z.container[,1] = z_current
#Initialization for the p matrix
#---
alpha_current = 1
p_current = simulating_POMM_powerlaw(K_true,alpha_current,beta_max = beta_max)
alpha.container[1] = alpha_current
p.container[,,1] = p_current$matrix
truncations_current = improper_prior5(K,beta_max,alpha)
p_logical_mat = (upper.tri(p_n_current,diag = T) & n_ij_matrix>0)
p_ij_current = p_n_current[p_logical_mat]
#Initialization for the p matrix
#---
alpha_current = 1
p_current = simulating_POMM_powerlaw(K_true,alpha_current,beta_max = beta_max)
p_current = simulating_POMM_powerlaw(K_true,alpha_current,beta_max = beta_max)
alpha.container[1] = alpha_current
p.container[,,1] = p_current$matrix
truncations_current = improper_prior5(K,beta_max,alpha)
p_logical_mat = (upper.tri(p_n_current,diag = T) & n_ij_matrix>0)
p_ij_current = p_n_current[p_logical_mat]
A_seq[1] = sum(dbinom(y_ij, n_ij, p_ij_current, log=T)) +  l_like_p_ij(p.true, truncations_current) +
dlnorm_param(alpha_prime) + ddirichlet_multinomial(N,K_true,n_k = n_k_current,my_alpha = gamma_vec)
#containers for the counts of accepted proposals
acc.count_z = 0
acc.count_p = 0
#setting time tracker
pb=txtProgressBar(min=1,max=N_iter)
j=2
diagnostic = matrix(0, nrow=5,ncol=N_iter)
#READY TO BOMB!
while (j < N_iter + 1) {
setTxtProgressBar(pb, j)
alpha_current=1
#Update of the P matrix
#----
sigma_prime = 1
#proposing a new alpha
alpha_prime <- sample_norm_trunc(1, alpha_current,s =sigma_prime,a = 0.01,b = 3)
truncations_prime <- improper_prior5(K,beta_max,alpha = alpha_prime)
r= (sum(dbinom(y_ij, n_ij, p_ij_true, log=T))+   l_like_p_ij(p.true, truncations_prime) + dlnorm_param(alpha_prime))  -
(sum(dbinom(y_ij, n_ij, p_ij_true, log = T))+  l_like_p_ij(p.true, truncations_current) + dlnorm_param(alpha_current))
alpha_r = min(1, exp(r))
u = runif(1)
if(r == -Inf){}else if(u<alpha_r ){
diagnostic[1,j-1] = 1
diagnostic[2,j-1] = alpha_prime
diagnostic[5,j-1] = exp(r)
#counting number of accepted proposals
acc.count_p = acc.count_p+1
#updating quantities
alpha_current = alpha_prime
truncations_current=truncations_prime
}else{
diagnostic[1,j-1] = 0
diagnostic[2,j-1] = alpha_prime
diagnostic[5,j-1] = exp(r)
}
#storing results for diagnostics
alpha.container[j]= alpha_current
A_seq[j] = sum(dbinom(y_ij, n_ij, p_ij_current, log=T)) +  l_like_p_ij(p.true,truncations = truncations_current) +
dlnorm_param(alpha_current) + ddirichlet_multinomial(N,K_true,n_k = n_k_current,my_alpha = gamma_vec)
j=j+1
}
