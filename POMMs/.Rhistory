gather( key = 'Ecocontributo',
value = Acciaio_EUR_TON, -Periodo) %>%
mutate(Acciaio_EUR_TON = as.numeric())
data_long = data %>%
gather( key = 'Ecocontributo',
value = Acciaio_EUR_TON, -Periodo) %>%
mutate(Acciaio_EUR_TON = as.numeric(Acciaio_EUR_TON))
data_long = data %>%
gather( key = 'Ecocontributo',
value = Acciaio_EUR_TON, -Periodo) %>%
mutate(Acciaio_EUR_TON = as.numeric(Acciaio_EUR_TON))
data_long = data %>%
gather( key = 'Ecocontributo',
value = Acciaio_EUR_TON, -Periodo)
data <- data.frame(
Periodo = c(2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020),
Acciaio_EUR_TON = c("31,00/26,00", "26,00", "26,00", "26,00/21,00/13,00", "13,00", "13,00", "8,00", "3,00", "3,00"),
Alluminio_EUR_TON = c("45,00", "45,00", "45,00", "45,00", "45,00", "45,00", "45,00/35,00", "15,00", "15,00"),
Carta_EUR_TON = c("14,00/10,00", "10,00/6,60/4,00", "4,00", "4,00", "4,00", "4,00", "10,00", "20,00/40,00", "35,00/55,00/75,00"),
Legno_EUR_TON = c("8,00", "8,00", "8,00", "8,00/7,00", "7,00", "7,00", "7,00", "7,00", "9,00"),
Plastica_EUR_TON = c("120,00/110,00", "110,00", "140,00", "188,00", "188,00", "188,00", "Fascia A: 179,00 Fascia B: 208,00 Fascia C: 228,00",
"Fascia A: 150,00 Fascia B1: 208,00 Fascia B2: 263,00 Fascia C: 369,00",
"Fascia A: 150,00 Fascia B1: 208,00 Fascia B2: 436,00 Fascia C: 546,00"),
Plastica_biodegradabile_e_compostabile_EUR_TON = c(NA, NA, NA, NA, NA, NA, NA, NA, NA),
Vetro_EUR_TON = c("17,82", "17,82", "17,82", "20,80", "17,30", "17,30/16,30", "13,30", "24,00/27,00", "27,00/31,00")
)
data_long = data %>%
gather( key = 'Ecocontributo',
value = Acciaio_EUR_TON, -Periodo)
View(data_long)
data <- data.frame(
Periodo = c(2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020),
Acciaio_EUR_TON = c("31,00/26,00", "26,00", "26,00", "26,00/21,00/13,00", "13,00", "13,00", "8,00", "3,00", "3,00"),
Alluminio_EUR_TON = c("45,00", "45,00", "45,00", "45,00", "45,00", "45,00", "45,00/35,00", "15,00", "15,00"),
Carta_EUR_TON = c("14,00/10,00", "10,00/6,60/4,00", "4,00", "4,00", "4,00", "4,00", "10,00", "20,00/40,00", "35,00/55,00/75,00"),
Legno_EUR_TON = c("8,00", "8,00", "8,00", "8,00/7,00", "7,00", "7,00", "7,00", "7,00", "9,00"),
Plastica_EUR_TON = c("120,00/110,00", "110,00", "140,00", "188,00", "188,00", "188,00", "Fascia A: 179,00 Fascia B: 208,00 Fascia C: 228,00",
"Fascia A: 150,00 Fascia B1: 208,00 Fascia B2: 263,00 Fascia C: 369,00",
"Fascia A: 150,00 Fascia B1: 208,00 Fascia B2: 436,00 Fascia C: 546,00"),
Vetro_EUR_TON = c("17,82", "17,82", "17,82", "20,80", "17,30", "17,30/16,30", "13,30", "24,00/27,00", "27,00/31,00")
)
data_long = data %>%
gather( key = 'Ecocontributo',
value = Acciaio_EUR_TON, -Periodo)
View(data_long)
read.csv('/Users/lapo_santi/Library/CloudStorage/OneDrive-Personal/Fabio/dati/RIGUARDO_TUTTI_PROS/Eco_contributo_CONAI.csv')
eco_contributo_df = read.csv('/Users/lapo_santi/Library/CloudStorage/OneDrive-Personal/Fabio/dati/RIGUARDO_TUTTI_PROS/Eco_contributo_CONAI.csv')
eco_contributo_df%>%
ggplot(aes(x = Periodo,  y =Acciaio_EUR_TON , group_by(Ecocontributo)))+
geom_line()
eco_contributo_df%>%
ggplot(aes(x = Anno,  y =Ammontare , group_by(Ecocontributo)))+
geom_line()
View(eco_contributo_df)
eco_contributo_df%>%
ggplot(aes(x = Anno,  y =Ammontare , group_by(Ecocontributo)))+
geom_line()+
facet_wrap(~Ecocontributo)
eco_contributo_df%>%
ggplot(aes(x = Anno,  y =Ammontare , group_by(Ecocontributo)))+
geom_boxplot()+
facet_wrap(~Ecocontributo)
eco_contributo_df%>%
ggplot(aes(x = Anno,  y =Ammontare))+
geom_boxplot()+
facet_wrap(~Ecocontributo)
eco_contributo_df%>%
ggplot(aes(x = Anno,  y =Ammontare))+
geom_point()+
facet_wrap(~Ecocontributo)
eco_contributo_df%>%
ggplot(aes(x = Anno,  y =Ammontare))+
geom_errorbar()+
facet_wrap(~Ecocontributo)
eco_contributo_df%>%
ggplot(aes(x = Anno,  y =Ammontare))+
geom_smooth()+
facet_wrap(~Ecocontributo)
eco_contributo_df%>%
filter(Ecocontributo != 'Plastica_EUR_TON')%>%
ggplot(aes(x = Anno,  y =Ammontare))+
geom_smooth()+
facet_wrap(~Ecocontributo)
eco_contributo_df%>%
filter(Ecocontributo != 'Plastica_EUR_TON')%>%
ggplot(aes(x = Anno,  y =Ammontare))+
geom_smooth()+
facet_wrap(~Ecocontributo, ncol=1)
eco_contributo_df%>%
filter(Ecocontributo != 'Plastica_EUR_TON')%>%
ggplot(aes(x = Anno,  y =Ammontare))+
geom_smooth()+
facet_wrap(~Ecocontributo, nrow=1)
eco_contributo_df%>%
filter(Ecocontributo != 'Plastica_EUR_TON')%>%
ggplot(aes(x = Anno,  y =Ammontare))+
geom_boxplot()+
facet_wrap(~Ecocontributo, nrow=1)
eco_contributo_df%>%
filter(Ecocontributo != 'Plastica_EUR_TON')%>%
ggplot(aes(x = Anno,  y =Ammontare, group_by(Anno)))+
geom_boxplot()+
facet_wrap(~Ecocontributo, nrow=1)
eco_contributo_df%>%
filter(Ecocontributo != 'Plastica_EUR_TON')%>%
ggplot(aes(x = Anno,  y =Ammontare, group_by(Ecocontributo)))+
geom_boxplot()+
facet_wrap(~Ecocontributo, nrow=1)
eco_contributo_df%>%
filter(Ecocontributo != 'Plastica_EUR_TON')%>%
ggplot(aes(x = Anno,  y =Ammontare))+
geom_smooth()+
facet_wrap(~Ecocontributo, nrow=1)+
theme_bw()
eco_no_pla = eco_contributo_df%>%
filter(Ecocontributo != 'Plastica_EUR_TON')%>%
ggplot(aes(x = Anno,  y =Ammontare))+
geom_smooth()+
facet_wrap(~Ecocontributo, nrow=1)+
theme_bw()
eco_pla = eco_contributo_df%>%
filter(Ecocontributo == 'Plastica_EUR_TON')%>%
ggplot(aes(x = Anno,  y =Ammontare))+
geom_smooth()+
facet_wrap(~Ecocontributo, nrow=1)+
theme_bw()
eco_pla
cowplot::plot_grid(eco_no_pla, eco_pla,
ncol = 1)
eco_pla = eco_contributo_df%>%
filter(Ecocontributo == 'Plastica_EUR_TON')%>%
ggplot(aes(x = Anno,  y =Ammontare))+
geom_smooth()+
facet_wrap(~Ecocontributo, nrow=1)+
theme_bw()+
theme(axis.text.x = element_text(angle=45))
eco_no_pla = eco_contributo_df%>%
filter(Ecocontributo != 'Plastica_EUR_TON')%>%
ggplot(aes(x = Anno,  y =Ammontare))+
geom_smooth()+
facet_wrap(~Ecocontributo, nrow=1)+
theme_bw()+
theme(axis.text.x = element_text(angle=45))
eco_pla = eco_contributo_df%>%
filter(Ecocontributo == 'Plastica_EUR_TON')%>%
ggplot(aes(x = Anno,  y =Ammontare))+
geom_smooth()+
facet_wrap(~Ecocontributo, nrow=1)+
theme_bw()+
theme(axis.text.x = element_text(angle=45))
cowplot::plot_grid(eco_no_pla, eco_pla,
ncol = 1)
a_posteriori_df %>%
ggplot(aes(x = BTrank, y = normalised, color = factor(z5)))+
geom_point()+
labs(title = 'The posterior allocation log-probability to the top block',
y = 'Log p (top-block)',
x = 'Bradley - Terry Abilities')+
theme_light()
a_posteriori_df %>%
ggplot(aes(x = BTrank, y = normalised, color = factor(z5)))+
geom_point()+
labs(title = 'The posterior allocation log-probability to the top block',
y = 'Log p (top-block)',
x = 'Bradley - Terry Abilities',
color = 'Clustering K=5')+
theme_light()
a_posteriori_df
abilities
BTM
BTM
abilities
bt_rank_df = data.frame(Id = rownames(abilities)[order(abilities[,1])],
BTrank = abilities[order(abilities[,1])],
SE = abilities[order(abilities[,2])])
a_posteriori_df = a_posteriori_df %>%
inner_join(bt_rank_df, by = c('items'='Id')) %>%
inner_join(est_df, by = c('items'='Id'))
a_posteriori_df %>%
ggplot(aes(x = BTrank, y = normalised, color = factor(z5)))+
geom_point()+
geom_errorbar(aes(xmin =BTrank-SE , ymax =  BTrank+SE))
a_posteriori_df
a_posteriori_df = data.frame(items = top_block_df_container$items[which(top_block_df_container$K == 6)])
for(k in 3:7){
partial_thing =  top_block_df_container[which(top_block_df_container$K == k),c('items', "p_top_block","z")]
colnames(partial_thing)[2] <- paste0('p_top_n_', k)
colnames(partial_thing)[3] <- paste0('z', k)
partial_thing[,2]  = log(partial_thing[,2]) +
marginal_likelihood_df1$marginal_likelihood[k]
a_posteriori_df = inner_join(a_posteriori_df, partial_thing, by = 'items')
}
a_posteriori_df = a_posteriori_df %>% mutate(exp_prob = rowSums(exp(a_posteriori_df[, c(2,4,6,8,10)]+300),na.rm = T))
a_posteriori_df['normalised']<- as.numeric(log(mpfr(a_posteriori_df$exp_prob,20)/exp(300)))
a_posteriori_df
BT_mat = cbind(Y_mat,L_mat)
player2 = factor(z_df_complete$col, levels = unique(c(z_df_complete$row, z_df_complete$col)))
player1 = factor(z_df_complete$row, levels = unique(c(z_df_complete$row, z_df_complete$col)))
library(BradleyTerry2)
BTM = BTm(outcome = BT_mat,player1 =player1 ,player2 =player2)
abilities = BTabilities(BTM)
bt_rank_df = data.frame(Id = rownames(abilities)[order(abilities[,1])],
BTrank = abilities[order(abilities[,1])],
SE = abilities[order(abilities[,2])])
a_posteriori_df = a_posteriori_df %>%
inner_join(bt_rank_df, by = c('items'='Id')) %>%
inner_join(est_df, by = c('items'='Id'))
a_posteriori_df %>%
ggplot(aes(x = BTrank, y = normalised, color = factor(z5)))+
geom_point()+
geom_errorbar(aes(xmin =BTrank-SE , ymax =  BTrank+SE))
a_posteriori_df %>%
ggplot(aes(y = BTrank, x = normalised, color = factor(z5)))+
geom_point()+
geom_errorbar(aes(ymin =BTrank-SE , ymax =  BTrank+SE))
a_posteriori_df %>%
ggplot(aes(y = BTrank, x = normalised, color = factor(z5)))+
geom_point()+
geom_errorbar(aes(ymin =BTrank-SE , ymax =  BTrank+SE))+
labs(title = 'The posterior allocation log-probability to the top block',
y = 'Log p (top-block)',
x = 'Bradley - Terry Abilities',
color = 'Clustering K=5')+
theme_light()
bt_rank_df
abilities
abilities[,1]
colnames(abilities)
abilities["ability"]
abilities[,"ability"]
bt_rank_df = data.frame(Id = rownames(abilities),
BTrank = abilities[,"ability"],
SE = abilities[,"s.e."])
a_posteriori_df = a_posteriori_df %>%
inner_join(bt_rank_df, by = c('items'='Id')) %>%
inner_join(est_df, by = c('items'='Id'))
a_posteriori_df %>%
ggplot(aes(y = BTrank, x = normalised, color = factor(z5)))+
geom_point()+
geom_errorbar(aes(ymin =BTrank-SE , ymax =  BTrank+SE))+
labs(title = 'The posterior allocation log-probability to the top block',
y = 'Log p (top-block)',
x = 'Bradley - Terry Abilities',
color = 'Clustering K=5')+
theme_light()
a_posteriori_df = data.frame(items = top_block_df_container$items[which(top_block_df_container$K == 6)])
for(k in 3:7){
partial_thing =  top_block_df_container[which(top_block_df_container$K == k),c('items', "p_top_block","z")]
colnames(partial_thing)[2] <- paste0('p_top_n_', k)
colnames(partial_thing)[3] <- paste0('z', k)
partial_thing[,2]  = log(partial_thing[,2]) +
marginal_likelihood_df1$marginal_likelihood[k]
a_posteriori_df = inner_join(a_posteriori_df, partial_thing, by = 'items')
}
a_posteriori_df = a_posteriori_df %>% mutate(exp_prob = rowSums(exp(a_posteriori_df[, c(2,4,6,8,10)]+300),na.rm = T))
a_posteriori_df['normalised']<- as.numeric(log(mpfr(a_posteriori_df$exp_prob,20)/exp(300)))
a_posteriori_df
bt_rank_df = data.frame(Id = rownames(abilities),
BTrank = abilities[,"ability"],
SE = abilities[,"s.e."])
a_posteriori_plot = a_posteriori_df %>%
inner_join(bt_rank_df, by = c('items'='Id')) %>%
inner_join(est_df, by = c('items'='Id'))
a_posteriori_plot %>%
ggplot(aes(y = BTrank, x = normalised, color = factor(z5)))+
geom_point()+
geom_errorbar(aes(ymin =BTrank-SE , ymax =  BTrank+SE))+
labs(title = 'The posterior allocation log-probability to the top block',
y = 'Log p (top-block)',
x = 'Bradley - Terry Abilities',
color = 'Clustering K=5')+
theme_light()
a_posteriori_plot %>%
ggplot(aes(y = BTrank, x = normalised, color = factor(z5)))+
geom_point()+
scale_y_log10()+
geom_errorbar(aes(ymin =BTrank-SE , ymax =  BTrank+SE))+
labs(title = 'The posterior allocation log-probability to the top block',
y = 'Log p (top-block)',
x = 'Bradley - Terry Abilities',
color = 'Clustering K=5')+
theme_light()
a_posteriori_plot %>%
ggplot(aes(y = BTrank, x = normalised, color = factor(z5)))+
geom_point()+
geom_errorbar(aes(ymin =BTrank-SE , ymax =  BTrank+SE))+
labs(title = 'The posterior allocation log-probability to the top block',
y = 'Log p (top-block)',
x = 'Bradley - Terry Abilities',
color = 'Clustering K=5')+
theme_light()
a_posteriori_plot %>%
ggplot(aes(y = BTrank, x = normalised, color = factor(z5)))+
geom_point()+
geom_errorbar(aes(ymin =BTrank-1.96*SE , ymax =  BTrank+1.96*SE))+
labs(title = 'The posterior allocation log-probability to the top block',
y = 'Log p (top-block)',
x = 'Bradley - Terry Abilities',
color = 'Clustering K=5')+
theme_light()
a_posteriori_plot %>%
ggplot(aes(y = BTrank, x = normalised, color = factor(z5)))+
geom_point()+
geom_errorbar(aes(ymin =BTrank-1.96*SE , ymax =  BTrank+1.96*SE))+
labs(title = 'The posterior allocation log-probability to the top block',
x = 'Log p (top-block)',
y = 'Bradley - Terry Abilities',
color = 'Clustering K=5')+
theme_light()
a_posteriori_plot %>%
ggplot(aes(y = BTrank, x = normalised, color = factor(z4)))+
geom_point()+
geom_errorbar(aes(ymin =BTrank-1.96*SE , ymax =  BTrank+1.96*SE))+
labs(title = 'The posterior allocation log-probability to the top block',
x = 'Log p (top-block)',
y = 'Bradley - Terry Abilities',
color = 'Clustering K=5')+
theme_light()
a_posteriori_plot %>%
ggplot(aes(y = BTrank, x = normalised, color = factor(z6)))+
geom_point()+
geom_errorbar(aes(ymin =BTrank-1.96*SE , ymax =  BTrank+1.96*SE))+
labs(title = 'The posterior allocation log-probability to the top block',
x = 'Log p (top-block)',
y = 'Bradley - Terry Abilities',
color = 'Clustering K=5')+
theme_light()
a_posteriori_plot %>%
ggplot(aes(x = BTrank, y = normalised, color = factor(z6)))+
geom_point()+
geom_errorbarh(aes(xmin =BTrank-1.96*SE , xmax =  BTrank+1.96*SE))+
labs(title = 'The posterior allocation log-probability to the top block',
y = 'Log p (top-block)',
x = 'Bradley - Terry Abilities',
color = 'Clustering K=5')+
theme_light()
a_posteriori_plot %>%
ggplot(aes(x = BTrank, y = normalised, color = factor(z5)))+
geom_point()+
geom_errorbarh(aes(xmin =BTrank-1.96*SE , xmax =  BTrank+1.96*SE))+
labs(title = 'The posterior allocation log-probability to the top block',
y = 'Log p (top-block)',
x = 'Bradley - Terry Abilities',
color = 'Clustering K=5')+
theme_light()
a_posteriori_plot %>%
ggplot(aes(x = BTrank, y = normalised, color = factor(z5)))+
geom_errorbarh(aes(xmin =BTrank-1.96*SE , xmax =  BTrank+1.96*SE))+
labs(title = 'The posterior allocation log-probability to the top block',
y = 'Log p (top-block)',
x = 'Bradley - Terry Abilities',
color = 'Clustering K=5')+
theme_light()
geom_point()+
a_posteriori_plot %>%
ggplot(aes(x = BTrank, y = normalised, color = factor(z5)))+
geom_point()+
geom_errorbarh(aes(xmin =BTrank-1.96*SE , xmax =  BTrank+1.96*SE))+
labs(title = 'The posterior allocation log-probability to the top block',
y = 'Log p (top-block)',
x = 'Bradley - Terry Abilities',
color = 'Clustering K=5')+
theme_light()
a_posteriori_plot %>%
ggplot(aes(x = BTrank, y = normalised, color = factor(z5)))+
geom_point()+
geom_errorbarh(aes(xmin =BTrank-1.96*SE , xmax =  BTrank+1.96*SE))+
labs(title = 'The posterior allocation log-probability to the top block',
y = 'Log p (top-block)',
x = 'Bradley - Terry Abilities',
color = 'Clustering K=5')+
theme_light()
print(paste0('You are simulating data according to the ', model, 'prior'))
model='WST'
print(paste0('You are simulating data according to the ', model, 'prior'))
print(paste0('You are simulating data according to the ', model, ' model prior'))
print(paste0('You are simulating theta according to the ', model, ' model prior'))
binary_scrambler = sample(c(1,-1),size = 1)
binary_scrambler
stopifnot(sigma!=0)
sigma
sigma=1
stopifnot(sigma!=0)
if(model == 'SST'&sigma!=0){
sigma=0
print('If model is SST, sigma should be zero')
mu_vec_sort = seq(0.4,0.9, (0.9-0.4)/(K))
mu_vec_sort = log(mu_vec_sort/(1-mu_vec_sort))
ut <- upper.tri(matrix(0,K,K),diag = T) # get the logical matrix for upper triangular elements
Pcombn = which(ut, arr.ind = TRUE) # get the indices of the upper triangular elements
uo<- data.frame(Pcombn[sample(nrow(Pcombn)), ])# permuting the order of the rows
n_P_entries<- nrow(uo)
P_prime<-matrix(0,K,K)
for(i_th in 1:n_P_entries){
i_star<- uo$row[i_th]
j_star<- uo$col[i_th]
lower.bound = mu_vec_sort[j_star - i_star + 1] - sigma
upper.bound = mu_vec_sort[j_star - i_star + 2] + sigma
P_prime[i_star,j_star]<- runif(1, min  = lower.bound , max = upper.bound)
}
P_prime[lower.tri(P_prime)] = - t(P_prime)[lower.tri(P_prime)]
}else if(if(model == 'WST'&sigma!=0){
stopifnot(sigma!=0)
)
if(model == 'SST'&sigma!=0){
sigma=0
print('If model is SST, sigma should be zero')
mu_vec_sort = seq(0.4,0.9, (0.9-0.4)/(K))
mu_vec_sort = log(mu_vec_sort/(1-mu_vec_sort))
ut <- upper.tri(matrix(0,K,K),diag = T) # get the logical matrix for upper triangular elements
Pcombn = which(ut, arr.ind = TRUE) # get the indices of the upper triangular elements
uo<- data.frame(Pcombn[sample(nrow(Pcombn)), ])# permuting the order of the rows
n_P_entries<- nrow(uo)
P_prime<-matrix(0,K,K)
for(i_th in 1:n_P_entries){
i_star<- uo$row[i_th]
j_star<- uo$col[i_th]
lower.bound = mu_vec_sort[j_star - i_star + 1] - sigma
upper.bound = mu_vec_sort[j_star - i_star + 2] + sigma
P_prime[i_star,j_star]<- runif(1, min  = lower.bound , max = upper.bound)
}
P_prime[lower.tri(P_prime)] = - t(P_prime)[lower.tri(P_prime)]
}else if(if(model == 'WST'&sigma!=0){
stopifnot(sigma!=0)
}
return(list(P = P_prime, mu= mu_vec_sort))
P = matrix(NA, K, K)
P[col(P)-row(P)==0] <-runif(K, 0,1)
for(diag_i in 1:(K-1)){
P[col(P)-row(P)==diag_i] <- runif( K-diag_i,0,1)
}
P
K
#upper triangular entries should not be greater than 0.5, nor increasing in the columns or in the rows
K=3
P = matrix(NA, K, K)
P[col(P)-row(P)==0] <-runif(K, 0,1)
for(diag_i in 1:(K-1)){
P[col(P)-row(P)==diag_i] <- runif( K-diag_i,0,1)
}
P
which(P >=0)
which(P >=0 & upper.tri(P))
which(P >=0 & upper.tri(P),arr.ind = T)
which(P >=0.5 & upper.tri(P),arr.ind = T)
#check for P
sum(which(P >=0.5 & upper.tri(P),arr.ind = T))
#check for P
sum(which(P >=0.5 & upper.tri(P)))
#check for P
sum((P >=0.5 & upper.tri(P)))
#check for P
sum(P >=0.5 & upper.tri(P))
#check for P
sum(P >=0.5 & upper.tri(P))/sum(upper.tri(P))
#check for P
1- sum(P >=0.5 & upper.tri(P))/sum(upper.tri(P))
#check for P
violating_WST_percent = 1- sum(P >=0.5 & upper.tri(P))/sum(upper.tri(P))
#check for P
violating_WST_percent = 1- sum(P >=0.5 & upper.tri(P,diag = T))/sum(upper.tri(P,diag = T))
violating_WST_percent
violating_WST_percent
P
scrambler_matrix = matrix(runif((K*(K-1))/2))
scrambler_matrix
scrambler_matrix = matrix(runif((K*(K-1))/2),K,K)
scrambler_matrix
scrambler_matrix = matrix(0,K,K)
scrambler_matrix[upper.tri(scrambler_matrix)] = runif((K*(K-1))/2 + K),
scrambler_matrix[upper.tri(scrambler_matrix)] = runif((K*(K-1))/2 + K)
scrambler_matrix[upper.tri(scrambler_matrix,diag = T)] = runif((K*(K-1))/2 + K)
scrambler_matrix
scrambler_matrix[upper.tri(scrambler_matrix,diag = T)] = sample(x = c(1,-1),size = (K*(K-1))/2 + K)
scrambler_matrix[upper.tri(scrambler_matrix,diag = T)] = sample(x = c(1,-1),size = (K*(K-1))/2 + K,replace = T)
scrambler_matrix
scrambler_matrix*P
P = scrambler_matrix*P
violating_WST_percent = 1- sum(P >=0.5 & upper.tri(P,diag = T))/sum(upper.tri(P,diag = T))
violating_WST_percent
#check for P
violating_WST_percent = 1- sum(P >=0.5 & upper.tri(P,diag = T))/sum(upper.tri(P,diag = T))
while(violating_WST_percent < -.4){
scrambler_matrix = matrix(0,K,K)
scrambler_matrix[upper.tri(scrambler_matrix,diag = T)] = sample(x = c(1,-1),size = (K*(K-1))/2 + K,replace = T)
P = scrambler_matrix*P
violating_WST_percent = 1- sum(P >=0.5 & upper.tri(P,diag = T))/sum(upper.tri(P,diag = T))
}
P
while(violating_WST_percent < .4){
scrambler_matrix = matrix(0,K,K)
scrambler_matrix[upper.tri(scrambler_matrix,diag = T)] = sample(x = c(1,-1),size = (K*(K-1))/2 + K,replace = T)
P = scrambler_matrix*P
violating_WST_percent = 1- sum(P >=0.5 & upper.tri(P,diag = T))/sum(upper.tri(P,diag = T))
}
#check for P
violating_WST_percent = 1- sum(P >=0.5 & upper.tri(P,diag = T))/sum(upper.tri(P,diag = T))
P = matrix(NA, K, K)
P[col(P)-row(P)==0] <-runif(K, 0,1)
for(diag_i in 1:(K-1)){
P[col(P)-row(P)==diag_i] <- runif( K-diag_i,0,1)
}
#check for P
violating_WST_percent = 1- sum(P >=0.5 & upper.tri(P,diag = T))/sum(upper.tri(P,diag = T))
while(violating_WST_percent < .4){
scrambler_matrix = matrix(0,K,K)
scrambler_matrix[upper.tri(scrambler_matrix,diag = T)] = sample(x = c(1,-1),size = (K*(K-1))/2 + K,replace = T)
P = scrambler_matrix*P
violating_WST_percent = 1- sum(P >=0.5 & upper.tri(P,diag = T))/sum(upper.tri(P,diag = T))
}
P
violating_WST_percent
