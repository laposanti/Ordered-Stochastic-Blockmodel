if(check_SST(mat_permuted)){
is.SST <- TRUE
}
if(check_WST(mat_permuted)){
is.WST <- TRUE
}
}
# Add the results to the dataframe
check_P_posterior <- rbind(check_P_posterior,
data.frame(model = 'Simple',
K = K,
t = t,
is.SST = is.SST,
is.WST = is.WST))
}
}
check_SST <- function(mat) {
n <- nrow(mat)
if (n != ncol(mat)) {
stop("The matrix is not square.")
}
# Extract upper triangular part (excluding diagonal)
# Extract upper triangular part (excluding diagonal)
upper_tri <- mat
upper_tri[lower.tri(upper_tri, diag = TRUE)] <- NA
diff(as.numeric(mat[1,]))>0
# Check if entries in each column are decreasing
is.SST = T
for(i in 1:n){
check_col <- all(diff(as.numeric(mat[i,]))>0)
check_row <- all(diff(as.numeric(mat[,i]))<0)
if(check_col==F | check_row==F){
is.SST = F
}
}
return(is.SST)
}
check_WST <- function(mat) {
n <- nrow(mat)
if (n != ncol(mat)) {
stop("The matrix is not square.")
}
# Check if entries in each column are increasing
greater_than_0.5 = all(mat[upper.tri(mat,diag = F)] >= 0.5)
# Combine the results
return(greater_than_0.5)
}
processed_wd <- "/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/results/MCMC_output/Fixed_K/Application/processed/Tennis_new/"
data_wd<- "/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/results/MCMC_output/Fixed_K/Simulation/"
true_model = 'SST'
filenames <- list.files(pattern = paste0('Data_from',true_model),path = data_wd)
print(filenames)
est_model = 'Simple'
# filenames <- list.files(pattern = paste0('True_Model',true_model,'Est_model_', est_model),path = data_wd)
est_model_files = grep(pattern = paste0('est_model',est_model),
x = filenames,value = T,ignore.case = F)
check_P_posterior <- data.frame(model = character(), K= numeric(), t = numeric(), is.SST=logical(), is.WST=logical())
for(file in 1:length(est_model_files)){
uploaded_results <- readRDS(paste0(data_wd, "/", est_model_files[file]))
K <- uploaded_results$chain1$ground_truth$K
N_iter <- dim(uploaded_results$chain1$est_containers$theta)[3]
for(t in 1:N_iter){
is.SST <- FALSE
is.WST <- FALSE
P_est_chain <- uploaded_results$chain1$est_containers$theta
permutation_matrix <- permutations(n = K, r = K, v = 1:K)
for(j in 1:nrow(permutation_matrix)){
mat_permuted <- P_est_chain[permutation_matrix[j,], permutation_matrix[j,], t]
if(check_SST(mat_permuted)){
is.SST <- TRUE
}
if(check_WST(mat_permuted)){
is.WST <- TRUE
}
}
# Add the results to the dataframe
check_P_posterior <- rbind(check_P_posterior,
data.frame(model = 'Simple',
K = K,
t = t,
is.SST = is.SST,
is.WST = is.WST))
}
}
check_P_posterior = data.frame(model = 'Simple', K= K_all)
check_P_posterior
check_P_posterior %>%
group_by(model, K)%>%
summarise(is_SST_perc = sum(is.SST)/N_iter,
is.WST_perc = sum(is.WST)/N_iter)
N_iter
check_P_posterior %>%
group_by(model, K)%>%
summarise(is_SST_perc = sum(is.SST)/N_iter,
is.WST_perc = sum(is.WST)/N_iter)
check_P_posterior %>%
group_by(model, K)%>%
summarise(is_SST_perc = sum(is.SST)/N_iter,
is.WST_perc = sum(is.WST)/N_iter)
processed_wd <- "/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/results/MCMC_output/Fixed_K/Application/processed/Tennis_new/"
data_wd<- "/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/results/MCMC_output/Fixed_K/Simulation/"
true_model = 'SST'
filenames <- list.files(pattern = paste0('Data_from',true_model),path = data_wd)
print(filenames)
est_model = 'Simple'
# filenames <- list.files(pattern = paste0('True_Model',true_model,'Est_model_', est_model),path = data_wd)
est_model_files = grep(pattern = paste0('est_model',est_model),
x = filenames,value = T,ignore.case = F)
check_P_posterior <- data.frame(model = character(), K= numeric(), t = numeric(), is.SST=logical(), is.WST=logical())
for(file in 1:length(est_model_files)){
uploaded_results <- readRDS(paste0(data_wd, "/", est_model_files[file]))
K <- uploaded_results$chain1$ground_truth$K
N_iter <- dim(uploaded_results$chain1$est_containers$theta)[3]
P_est_chain <- uploaded_results$chain1$est_containers$theta
permutation_matrix <- permutations(n = K, r = K, v = 1:K)
for(t in 1:N_iter){
is.SST <- FALSE
is.WST <- FALSE
for(j in 1:nrow(permutation_matrix)){
mat_permuted <- P_est_chain[permutation_matrix[j,], permutation_matrix[j,], t]
if(check_SST(mat_permuted)){
is.SST <- TRUE
}
if(check_WST(mat_permuted)){
is.WST <- TRUE
}
}
# Add the results to the dataframe
check_P_posterior <- rbind(check_P_posterior,
data.frame(model = 'Simple',
K = K,
t = t,
is.SST = is.SST,
is.WST = is.WST))
}
}
check_P_posterior %>%
group_by(model, K)%>%
summarise(is_SST_perc = sum(is.SST)/N_iter,
is.WST_perc = sum(is.WST)/N_iter)
mat_permuted
check_SST(mat_permuted)
is.SST
is.SST <- FALSE
is.WST <- FALSE
for(j in 1:nrow(permutation_matrix)){
mat_permuted <- P_est_chain[permutation_matrix[j,], permutation_matrix[j,], t]
if(check_SST(mat_permuted)){
is.SST <- TRUE
}
if(check_WST(mat_permuted)){
is.WST <- TRUE
}
}
is.SST
check_SST(mat_permuted)
mat_permuted
print(j)
is.SST <- FALSE
is.WST <- FALSE
for(j in 1:nrow(permutation_matrix)){
mat_permuted <- P_est_chain[permutation_matrix[j,], permutation_matrix[j,], t]
if(check_SST(mat_permuted)){
is.SST <- TRUE
print(j)
}
if(check_WST(mat_permuted)){
is.WST <- TRUE
}
}
j=19
j=18
mat_permuted <- P_est_chain[permutation_matrix[j,], permutation_matrix[j,], t]
mat_permuted
is.WST
check_P_posterior
check_P_posterior %>%
group_by(model, K)%>%
summarise(is_SST_perc = sum(is.SST)/N_iter,
is.WST_perc = sum(is.WST)/N_iter)
check_P_posterior[24000,]
t=24000
is.SST <- FALSE
is.WST <- FALSE
t=24000
is.SST <- FALSE
is.WST <- FALSE
for(j in 1:nrow(permutation_matrix)){
mat_permuted <- P_est_chain[permutation_matrix[j,], permutation_matrix[j,], t]
if(check_SST(mat_permuted)){
is.SST <- TRUE
print(j)
}
if(check_WST(mat_permuted)){
is.WST <- TRUE
}
}
t=4000
is.SST <- FALSE
is.WST <- FALSE
for(j in 1:nrow(permutation_matrix)){
mat_permuted <- P_est_chain[permutation_matrix[j,], permutation_matrix[j,], t]
if(check_SST(mat_permuted)){
is.SST <- TRUE
print(j)
}
if(check_WST(mat_permuted)){
is.WST <- TRUE
}
}
j=18
mat_permuted <- P_est_chain[permutation_matrix[j,], permutation_matrix[j,], t]
mat_permuted
check_WST(mat_permuted)
check_WST
all(mat_permuted[upper.tri(mat_permuted,diag = F)] >= 0.5)
mat_permuted
check_SST <- function(mat) {
n <- nrow(mat)
if (n != ncol(mat)) {
stop("The matrix is not square.")
}
# Extract upper triangular part (excluding diagonal)
# Extract upper triangular part (excluding diagonal)
upper_tri <- mat
upper_tri[lower.tri(upper_tri, diag = TRUE)] <- NA
diff(as.numeric(mat[1,]))>0
# Check if entries in each column are decreasing
is.SST = T
for(i in 1:n){
check_col <- all(diff(as.numeric(mat[i,]))>0)
check_row <- all(diff(as.numeric(mat[,i]))<0)
check_0.5 <- all(mat[upper.tri(mat,diag = F)] >= 0.5)
if(check_col==F | check_row==F | check_0.5==F ){
is.SST = F
}
}
return(is.SST)
}
check_WST <- function(mat) {
n <- nrow(mat)
if (n != ncol(mat)) {
stop("The matrix is not square.")
}
# Check if entries in each column are increasing
greater_than_0.5 = all(mat[upper.tri(mat,diag = F)] >= 0.5)
# Combine the results
return(greater_than_0.5)
}
processed_wd <- "/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/results/MCMC_output/Fixed_K/Application/processed/Tennis_new/"
data_wd<- "/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/results/MCMC_output/Fixed_K/Simulation/"
true_model = 'SST'
filenames <- list.files(pattern = paste0('Data_from',true_model),path = data_wd)
print(filenames)
est_model = 'Simple'
# filenames <- list.files(pattern = paste0('True_Model',true_model,'Est_model_', est_model),path = data_wd)
est_model_files = grep(pattern = paste0('est_model',est_model),
x = filenames,value = T,ignore.case = F)
check_P_posterior <- data.frame(model = character(), K= numeric(), t = numeric(), is.SST=logical(), is.WST=logical())
for(file in 1:length(est_model_files)){
uploaded_results <- readRDS(paste0(data_wd, "/", est_model_files[file]))
K <- uploaded_results$chain1$ground_truth$K
N_iter <- dim(uploaded_results$chain1$est_containers$theta)[3]
P_est_chain <- uploaded_results$chain1$est_containers$theta
permutation_matrix <- permutations(n = K, r = K, v = 1:K)
for(t in 1:N_iter){
t=4000
is.SST <- FALSE
is.WST <- FALSE
for(j in 1:nrow(permutation_matrix)){
j=18
mat_permuted <- P_est_chain[permutation_matrix[j,], permutation_matrix[j,], t]
if(check_SST(mat_permuted)){
is.SST <- TRUE
print(j)
}
if(check_WST(mat_permuted)){
is.WST <- TRUE
}
}
# Add the results to the dataframe
check_P_posterior <- rbind(check_P_posterior,
data.frame(model = 'Simple',
K = K,
t = t,
is.SST = is.SST,
is.WST = is.WST))
}
}
processed_wd <- "/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/results/MCMC_output/Fixed_K/Application/processed/Tennis_new/"
data_wd<- "/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/results/MCMC_output/Fixed_K/Simulation/"
true_model = 'SST'
filenames <- list.files(pattern = paste0('Data_from',true_model),path = data_wd)
print(filenames)
est_model = 'Simple'
# filenames <- list.files(pattern = paste0('True_Model',true_model,'Est_model_', est_model),path = data_wd)
est_model_files = grep(pattern = paste0('est_model',est_model),
x = filenames,value = T,ignore.case = F)
check_P_posterior <- data.frame(model = character(), K= numeric(), t = numeric(), is.SST=logical(), is.WST=logical())
for(file in 1:length(est_model_files)){
uploaded_results <- readRDS(paste0(data_wd, "/", est_model_files[file]))
K <- uploaded_results$chain1$ground_truth$K
N_iter <- dim(uploaded_results$chain1$est_containers$theta)[3]
P_est_chain <- uploaded_results$chain1$est_containers$theta
permutation_matrix <- permutations(n = K, r = K, v = 1:K)
for(t in 1:N_iter){
is.SST <- FALSE
is.WST <- FALSE
for(j in 1:nrow(permutation_matrix)){
mat_permuted <- P_est_chain[permutation_matrix[j,], permutation_matrix[j,], t]
if(check_SST(mat_permuted)){
is.SST <- TRUE
}
if(check_WST(mat_permuted)){
is.WST <- TRUE
}
}
# Add the results to the dataframe
check_P_posterior <- rbind(check_P_posterior,
data.frame(model = 'Simple',
K = K,
t = t,
is.SST = is.SST,
is.WST = is.WST))
}
}
check_P_posterior %>%
group_by(model, K)%>%
summarise(is_SST_perc = sum(is.SST)/N_iter,
is.WST_perc = sum(is.WST)/N_iter)
P_est_chain
apply(theta_est_chain, 3, inverse_logit_f)
theta_est_chain <- uploaded_results$chain1$est_containers$theta
apply(theta_est_chain, 3, inverse_logit_f)
P_est_chain=apply(theta_est_chain, 3, inverse_logit_f)
P_est_chain[,,1]
P_est_chain=apply(theta_est_chain, c(1:2), inverse_logit_f)
P_est_chain[,,1]
P_est_chain= apply(theta_est_chain, 3, inverse_logit_f)
P_est_chain= apply(theta_est_chain, 1:2, inverse_logit_f)
dim(P_est_chain)
P_est_chain[1,,]
P_est_chain= apply(theta_est_chain, c(1, 2, 3), inverse_logit_f)
dim(P_est_chain)
uploaded_results <- readRDS(paste0(data_wd, "/", est_model_files[file]))
K <- uploaded_results$chain1$ground_truth$K
N_iter <- dim(uploaded_results$chain1$est_containers$theta)[3]
theta_est_chain <- uploaded_results$chain1$est_containers$theta
P_est_chain= apply(theta_est_chain, c(1, 2, 3), inverse_logit_f)
processed_wd <- "/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/results/MCMC_output/Fixed_K/Application/processed/Tennis_new/"
data_wd<- "/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/results/MCMC_output/Fixed_K/Simulation/"
true_model = 'SST'
filenames <- list.files(pattern = paste0('Data_from',true_model),path = data_wd)
print(filenames)
est_model = 'Simple'
# filenames <- list.files(pattern = paste0('True_Model',true_model,'Est_model_', est_model),path = data_wd)
est_model_files = grep(pattern = paste0('est_model',est_model),
x = filenames,value = T,ignore.case = F)
check_P_posterior <- data.frame(model = character(), K= numeric(), t = numeric(), is.SST=logical(), is.WST=logical())
for(file in 1:length(est_model_files)){
uploaded_results <- readRDS(paste0(data_wd, "/", est_model_files[file]))
K <- uploaded_results$chain1$ground_truth$K
N_iter <- dim(uploaded_results$chain1$est_containers$theta)[3]
theta_est_chain <- uploaded_results$chain1$est_containers$theta
P_est_chain= apply(theta_est_chain, c(1, 2, 3), inverse_logit_f)
permutation_matrix <- permutations(n = K, r = K, v = 1:K)
for(t in 1:N_iter){
is.SST <- FALSE
is.WST <- FALSE
for(j in 1:nrow(permutation_matrix)){
mat_permuted <- P_est_chain[permutation_matrix[j,], permutation_matrix[j,], t]
if(check_SST(mat_permuted)){
is.SST <- TRUE
}
if(check_WST(mat_permuted)){
is.WST <- TRUE
}
}
# Add the results to the dataframe
check_P_posterior <- rbind(check_P_posterior,
data.frame(model = 'Simple',
K = K,
t = t,
is.SST = is.SST,
is.WST = is.WST))
}
}
check_P_posterior %>%
group_by(model, K)%>%
summarise(is_SST_perc = sum(is.SST)/N_iter,
is.WST_perc = sum(is.WST)/N_iter)
check_P_posterior
mat_permuted
check_P_posterior[23]
check_P_posterior[23,]
t=23
is.SST <- FALSE
is.WST <- FALSE
permutation_matrix <- permutations(n = K, r = K, v = 1:K)
for(t in 1:N_iter){
t=23
is.SST <- FALSE
is.WST <- FALSE
for(j in 1:nrow(permutation_matrix)){
mat_permuted <- P_est_chain[permutation_matrix[j,], permutation_matrix[j,], t]
if(check_SST(mat_permuted)){
is.SST <- TRUE
print(j)
}
if(check_WST(mat_permuted)){
is.WST <- TRUE
}
}
# Add the results to the dataframe
check_P_posterior <- rbind(check_P_posterior,
data.frame(model = 'Simple',
K = K,
t = t,
is.SST = is.SST,
is.WST = is.WST))
}
t=23
is.SST <- FALSE
is.WST <- FALSE
for(j in 1:nrow(permutation_matrix)){
mat_permuted <- P_est_chain[permutation_matrix[j,], permutation_matrix[j,], t]
if(check_SST(mat_permuted)){
is.SST <- TRUE
print(j)
}
if(check_WST(mat_permuted)){
is.WST <- TRUE
}
}
j=18
mat_permuted <- P_est_chain[permutation_matrix[j,], permutation_matrix[j,], t]
mat_permuted
P_est_chain
t=62
is.SST <- FALSE
is.WST <- FALSE
for(j in 1:nrow(permutation_matrix)){
j=18
mat_permuted <- P_est_chain[permutation_matrix[j,], permutation_matrix[j,], t]
if(check_SST(mat_permuted)){
is.SST <- TRUE
print(j)
}
if(check_WST(mat_permuted)){
is.WST <- TRUE
}
}
t=62
is.SST <- FALSE
is.WST <- FALSE
for(j in 1:nrow(permutation_matrix)){
j=18
mat_permuted <- P_est_chain[permutation_matrix[j,], permutation_matrix[j,], t]
if(check_SST(mat_permuted)){
is.SST <- TRUE
print(j)
}
if(check_WST(mat_permuted)){
is.WST <- TRUE
}
}
mat_permuted
permutation_matrix[j,]
P_est_chain
P_est_chain[,,62]
permutation_matrix[j,]
processed_wd <- "/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/results/MCMC_output/Fixed_K/Application/processed/Tennis_new/"
data_wd<- "/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/results/MCMC_output/Fixed_K/Simulation/"
true_model = 'SST'
filenames <- list.files(pattern = paste0('Data_from',true_model),path = data_wd)
print(filenames)
est_model = 'Simple'
# filenames <- list.files(pattern = paste0('True_Model',true_model,'Est_model_', est_model),path = data_wd)
est_model_files = grep(pattern = paste0('est_model',est_model),
x = filenames,value = T,ignore.case = F)
check_P_posterior <- data.frame(model = character(), K= numeric(), t = numeric(), is.SST=logical(), is.WST=logical())
for(file in 1:length(est_model_files)){
uploaded_results <- readRDS(paste0(data_wd, "/", est_model_files[file]))
K <- uploaded_results$chain1$ground_truth$K
N_iter <- dim(uploaded_results$chain1$est_containers$theta)[3]
theta_est_chain <- uploaded_results$chain1$est_containers$theta
P_est_chain= apply(theta_est_chain, c(1, 2, 3), inverse_logit_f)
permutation_matrix <- permutations(n = K, r = K, v = 1:K)
for(t in 1:N_iter){
t=62
is.SST <- FALSE
is.WST <- FALSE
for(j in 1:nrow(permutation_matrix)){
j=18
mat_permuted <- P_est_chain[permutation_matrix[j,], permutation_matrix[j,], t]
if(check_SST(mat_permuted)){
is.SST <- TRUE
print(j)
}
if(check_WST(mat_permuted)){
is.WST <- TRUE
}
}
# Add the results to the dataframe
check_P_posterior <- rbind(check_P_posterior,
data.frame(model = 'Simple',
K = K,
t = t,
is.SST = is.SST,
is.WST = is.WST))
}
}
