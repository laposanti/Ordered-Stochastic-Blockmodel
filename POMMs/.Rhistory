ground_truth = list(z = z,
sigma_squared=sigma_squared,
mu_vec_star = mu_vec,
K=K,P=P)
}else if(true_model == 'Simple'){
ground_truth = list(z = z,
sigma_squared=NA,
mu_vec_star = NA,
K=K,
P=P)
}
to_be_saved = list(Y_ij=Y_ij, N_ij =N_ij, ground_truth = ground_truth,
data_plot = adjacency_m,
seed=seed)
saveRDS(to_be_saved, paste0(saving_directory, true_model, K,"_data",n_simul,".RDS"))
}
}
true_model = 'WST'
saving_directory="/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/Data/Simulation_data/"
simulations = 1
for(k in 3:6){
for(n_simul in 1:simulations){
n = 80
K=k
seed =2011+n_simul-1
set.seed(seed)
if(true_model =='SST'){
prior_SST = generate_theta_from_SST_prior(K, model = 'SST',sigma = 0)
P<- prior_SST$P
mu_vec =  prior_SST$mu
}else if(true_model == 'WST'){
sigma_squared = 0.3
prior_WST = generate_theta_from_SST_prior(K, model = 'WST',sigma = sigma_squared)
P<- prior_WST$P
mu_vec =  prior_WST$mu
}else if( true_model == 'Simple'){
theta = matrix(NA, K, K)
theta[col(theta)-row(theta)==0] <-runif(K, .6,.85)
for(diag_i in 1:(K-1)){
theta[col(theta)-row(theta)==diag_i] <- runif( K-diag_i,0.01,.9)
}
theta[lower.tri(theta)] = 1-t(theta)[lower.tri(theta)]
P = log(theta/(1-theta))
}
theta = inverse_logit_f(P)
z <- sample(1:K, n,replace=T)
z_P<- vec2mat_0_P(clust_lab = z,P = theta)
P_nbyn<- calculate_victory_probabilities(z_mat = z_P,P = theta)
N_ij= matrix(10,n,n)
#simulating Y_ij
Y_ij <- matrix(0, n,n)
for(i in 1:n){
for(j in 1:n){
Y_ij[i,j]<- round(N_ij[i,j]*P_nbyn[i,j],0) + sample(c(1,-1),1)
}
}
Y_ij[lower.tri(Y_ij)] = N_ij[lower.tri(N_ij)] - t(Y_ij)[lower.tri(Y_ij)]
diag(Y_ij)<- 0
indices <- expand.grid(row = 1:n, col = 1:n)
z_df <- data.frame(items = 1:n,
z = z)
# Convert the matrix to a data frame
z_df_complete <- data.frame(
row = indices$row,
col = indices$col,
similarity_value = NA,
Y = NA
)
for (i in seq_len(nrow(z_df_complete))) {
z_df_complete$Y[i] <- Y_ij[z_df_complete$col[i], z_df_complete$row[i]]
}
plot_df = z_df_complete%>%
inner_join(z_df, by = c("row" = "items")) %>%
rename(row_z = z) %>%
inner_join(z_df, by = c("col" = "items")) %>%
rename(col_z = z) %>%
mutate(row = factor(row, levels = unique(row[order(row_z, row)])),
col = factor(col, levels = unique(col[order(col_z, col, decreasing = TRUE)])))
adjacency_m<- ggplot(plot_df, aes(x = row, y = col)) +
geom_tile(aes(fill = Y), color = "gray", show.legend = FALSE) +
scale_fill_gradient(low = "white", high = "black") +
geom_ysidetile(aes(color = factor(col_z)), show.legend = FALSE, width = 0.5) +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
print(adjacency_m)
if(true_model == 'SST'){
ground_truth = list(z = z,
sigma_squared=NA,
mu_vec_star = mu_vec,
K=K,P=P)
}else if(true_model == 'WST'){
ground_truth = list(z = z,
sigma_squared=sigma_squared,
mu_vec_star = mu_vec,
K=K,P=P)
}else if(true_model == 'Simple'){
ground_truth = list(z = z,
sigma_squared=NA,
mu_vec_star = NA,
K=K,
P=P)
}
to_be_saved = list(Y_ij=Y_ij, N_ij =N_ij, ground_truth = ground_truth,
data_plot = adjacency_m,
seed=seed,
model = true_model)
saveRDS(to_be_saved, paste0(saving_directory, true_model, K,"_data",n_simul,".RDS"))
}
}
true_model = 'SST'
saving_directory="/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/Data/Simulation_data/"
simulations = 1
for(k in 3:6){
for(n_simul in 1:simulations){
n = 80
K=k
seed =2011+n_simul-1
set.seed(seed)
if(true_model =='SST'){
prior_SST = generate_theta_from_SST_prior(K, model = 'SST',sigma = 0)
P<- prior_SST$P
mu_vec =  prior_SST$mu
}else if(true_model == 'WST'){
sigma_squared = 0.3
prior_WST = generate_theta_from_SST_prior(K, model = 'WST',sigma = sigma_squared)
P<- prior_WST$P
mu_vec =  prior_WST$mu
}else if( true_model == 'Simple'){
theta = matrix(NA, K, K)
theta[col(theta)-row(theta)==0] <-runif(K, .6,.85)
for(diag_i in 1:(K-1)){
theta[col(theta)-row(theta)==diag_i] <- runif( K-diag_i,0.01,.9)
}
theta[lower.tri(theta)] = 1-t(theta)[lower.tri(theta)]
P = log(theta/(1-theta))
}
theta = inverse_logit_f(P)
z <- sample(1:K, n,replace=T)
z_P<- vec2mat_0_P(clust_lab = z,P = theta)
P_nbyn<- calculate_victory_probabilities(z_mat = z_P,P = theta)
N_ij= matrix(10,n,n)
#simulating Y_ij
Y_ij <- matrix(0, n,n)
for(i in 1:n){
for(j in 1:n){
Y_ij[i,j]<- round(N_ij[i,j]*P_nbyn[i,j],0) + sample(c(1,-1),1)
}
}
Y_ij[lower.tri(Y_ij)] = N_ij[lower.tri(N_ij)] - t(Y_ij)[lower.tri(Y_ij)]
diag(Y_ij)<- 0
indices <- expand.grid(row = 1:n, col = 1:n)
z_df <- data.frame(items = 1:n,
z = z)
# Convert the matrix to a data frame
z_df_complete <- data.frame(
row = indices$row,
col = indices$col,
similarity_value = NA,
Y = NA
)
for (i in seq_len(nrow(z_df_complete))) {
z_df_complete$Y[i] <- Y_ij[z_df_complete$col[i], z_df_complete$row[i]]
}
plot_df = z_df_complete%>%
inner_join(z_df, by = c("row" = "items")) %>%
rename(row_z = z) %>%
inner_join(z_df, by = c("col" = "items")) %>%
rename(col_z = z) %>%
mutate(row = factor(row, levels = unique(row[order(row_z, row)])),
col = factor(col, levels = unique(col[order(col_z, col, decreasing = TRUE)])))
adjacency_m<- ggplot(plot_df, aes(x = row, y = col)) +
geom_tile(aes(fill = Y), color = "gray", show.legend = FALSE) +
scale_fill_gradient(low = "white", high = "black") +
geom_ysidetile(aes(color = factor(col_z)), show.legend = FALSE, width = 0.5) +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
print(adjacency_m)
if(true_model == 'SST'){
ground_truth = list(z = z,
sigma_squared=NA,
mu_vec_star = mu_vec,
K=K,P=P)
}else if(true_model == 'WST'){
ground_truth = list(z = z,
sigma_squared=sigma_squared,
mu_vec_star = mu_vec,
K=K,P=P)
}else if(true_model == 'Simple'){
ground_truth = list(z = z,
sigma_squared=NA,
mu_vec_star = NA,
K=K,
P=P)
}
to_be_saved = list(Y_ij=Y_ij, N_ij =N_ij, ground_truth = ground_truth,
data_plot = adjacency_m,
seed=seed,
model = true_model)
saveRDS(to_be_saved, paste0(saving_directory, true_model, K,"_data",n_simul,".RDS"))
}
}
true_model = 'Simple'
saving_directory="/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/Data/Simulation_data/"
simulations = 1
for(k in 3:6){
for(n_simul in 1:simulations){
n = 80
K=k
seed =2011+n_simul-1
set.seed(seed)
if(true_model =='SST'){
prior_SST = generate_theta_from_SST_prior(K, model = 'SST',sigma = 0)
P<- prior_SST$P
mu_vec =  prior_SST$mu
}else if(true_model == 'WST'){
sigma_squared = 0.3
prior_WST = generate_theta_from_SST_prior(K, model = 'WST',sigma = sigma_squared)
P<- prior_WST$P
mu_vec =  prior_WST$mu
}else if( true_model == 'Simple'){
theta = matrix(NA, K, K)
theta[col(theta)-row(theta)==0] <-runif(K, .6,.85)
for(diag_i in 1:(K-1)){
theta[col(theta)-row(theta)==diag_i] <- runif( K-diag_i,0.01,.9)
}
theta[lower.tri(theta)] = 1-t(theta)[lower.tri(theta)]
P = log(theta/(1-theta))
}
theta = inverse_logit_f(P)
z <- sample(1:K, n,replace=T)
z_P<- vec2mat_0_P(clust_lab = z,P = theta)
P_nbyn<- calculate_victory_probabilities(z_mat = z_P,P = theta)
N_ij= matrix(10,n,n)
#simulating Y_ij
Y_ij <- matrix(0, n,n)
for(i in 1:n){
for(j in 1:n){
Y_ij[i,j]<- round(N_ij[i,j]*P_nbyn[i,j],0) + sample(c(1,-1),1)
}
}
Y_ij[lower.tri(Y_ij)] = N_ij[lower.tri(N_ij)] - t(Y_ij)[lower.tri(Y_ij)]
diag(Y_ij)<- 0
indices <- expand.grid(row = 1:n, col = 1:n)
z_df <- data.frame(items = 1:n,
z = z)
# Convert the matrix to a data frame
z_df_complete <- data.frame(
row = indices$row,
col = indices$col,
similarity_value = NA,
Y = NA
)
for (i in seq_len(nrow(z_df_complete))) {
z_df_complete$Y[i] <- Y_ij[z_df_complete$col[i], z_df_complete$row[i]]
}
plot_df = z_df_complete%>%
inner_join(z_df, by = c("row" = "items")) %>%
rename(row_z = z) %>%
inner_join(z_df, by = c("col" = "items")) %>%
rename(col_z = z) %>%
mutate(row = factor(row, levels = unique(row[order(row_z, row)])),
col = factor(col, levels = unique(col[order(col_z, col, decreasing = TRUE)])))
adjacency_m<- ggplot(plot_df, aes(x = row, y = col)) +
geom_tile(aes(fill = Y), color = "gray", show.legend = FALSE) +
scale_fill_gradient(low = "white", high = "black") +
geom_ysidetile(aes(color = factor(col_z)), show.legend = FALSE, width = 0.5) +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
print(adjacency_m)
if(true_model == 'SST'){
ground_truth = list(z = z,
sigma_squared=NA,
mu_vec_star = mu_vec,
K=K,P=P)
}else if(true_model == 'WST'){
ground_truth = list(z = z,
sigma_squared=sigma_squared,
mu_vec_star = mu_vec,
K=K,P=P)
}else if(true_model == 'Simple'){
ground_truth = list(z = z,
sigma_squared=NA,
mu_vec_star = NA,
K=K,
P=P)
}
to_be_saved = list(Y_ij=Y_ij, N_ij =N_ij, ground_truth = ground_truth,
data_plot = adjacency_m,
seed=seed,
model = true_model)
saveRDS(to_be_saved, paste0(saving_directory, true_model, K,"_data",n_simul,".RDS"))
}
}
is.simulation=T
data_directory = "./Data/Simulation_data/"
filenames <- list.files(pattern = paste0('data_1'),path =data_directory)
print(filenames) #data to be estimated
filenames <- list.files(pattern = paste0('data1'),path =data_directory)
print(filenames) #data to be estimated
data_to_be_estimated <- readRDS(paste0(data_directory,"/",filenames[file]))
data_to_be_estimated$data_plot
true_model = data_to_be_estimated$model
true_model
filenames <- list.files(pattern = paste0('data1'),path =data_directory)
print(filenames) #data to be estimated
# Define a custom sorting order
sorting_order <- c("SST", "WST", "Simple")
# Extract the category of each name
categories <- gsub("([A-Za-z]+).*", "\\1", names)
# Use order() function to sort the names based on the custom sorting order
sorted_names <- names[order(match(categories, sorting_order))]
# Extract the category of each name
categories <- gsub("([A-Za-z]+).*", "\\1", filenames)
# Use order() function to sort the names based on the custom sorting order
sorted_names <- names[order(match(categories, sorting_order))]
# Use order() function to sort the names based on the custom sorting order
sorted_names <- filenames[order(match(categories, sorting_order))]
sorted_names
data_directory = "./Data/Simulation_data/"
filenames <- list.files(pattern = true_model,path =data_directory)
print(filenames) #data to be estimated
true_model ='SST'
filenames <- list.files(pattern = true_model,path =data_directory)
print(filenames) #data to be estimated
#
choose_model_to_estimate = c('SST','WST','Simple')
for(file in 1:length(sorted_names)){
data_to_be_estimated <- readRDS(paste0(data_directory,"/",filenames[file]))
data_to_be_estimated$data_plot
true_model = data_to_be_estimated$model
N_ij = data_to_be_estimated$N_ij
n = nrow(N_ij)
Y_ij = data_to_be_estimated$Y_ij
ground_truth =data_to_be_estimated$ground_truth
K= nrow(data_to_be_estimated$ground_truth$P)
print(paste0("True data--->", filenames[file]))
##############################################################################
# Estimation: set the parameters of the estimation
##############################################################################
n_chains = 4
optimal_acceptance_rate_P =.44
optimal_acceptance_rate_mu = .234
N_iter= 100000
chains_seeds = list(20,21,22,23)
#-----------------------------------------------------------------------------
# SST MODEL
#-----------------------------------------------------------------------------
if('SST' %in% choose_model_to_estimate){
print(paste0("Estimation of the SST model, K=",K))
print(paste0("Begin cycle at:", date()))
#initializing each chain
estimation_control = list(z = 1,sigma_squared=0, mu_vec=1,K=0,P=1)
K_chains = list(K,K,K,K)
t_chains = rep(1,n_chains)
chains_SST = adaptive_MCMC_orderstats(Y_ij = Y_ij, N_ij = N_ij ,
estimation_control = estimation_control,
ground_truth = ground_truth,
n = n, N_iter = N_iter,n_chains = n_chains,
optimal_acceptance_rate_P =optimal_acceptance_rate_P,
optimal_acceptance_rate_mu =optimal_acceptance_rate_mu,
K = K_chains,
seed = chains_seeds, model = 'SST', t= t_chains, custom_init = NA)
my_names<- paste0("chain", 1:n_chains)
names(chains_SST)<-my_names
filename_SST <- paste0("./results/simulation/",true_model,"_true//True_Model",true_model,"Est_model_SST","N", n,"_K", K,".RDS")
saveRDS(chains_SST, file = filename_SST) #saving results
beep("coin")
}
#-----------------------------------------------------------------------------
# WST MODEL
#-----------------------------------------------------------------------------
if('WST' %in% choose_model_to_estimate){
print(paste0("Estimation of the WST model, K=",K))
print(paste0("Begin cycle at:",date()))
#initializing each chain
estimation_control = list(z = 1,sigma_squared=1, mu_vec=1,K=0,P=1)
chains_WST = adaptive_MCMC_orderstats(Y_ij = Y_ij, N_ij = N_ij ,
estimation_control = estimation_control,
ground_truth = ground_truth,
n = n, N_iter = N_iter,n_chains = n_chains,
optimal_acceptance_rate_P =optimal_acceptance_rate_P,
optimal_acceptance_rate_mu =optimal_acceptance_rate_mu,
K = K_chains,
seed = chains_seeds, model = 'WST',t=t_chains, custom_init = NA)
my_names <- paste0("chain", 1:n_chains)
names(chains_WST)<-my_names
filename_WST <- paste0("./results/simulation/",true_model,"_true//True_Model",true_model,"Est_model_WST","_N", n,"_K", K,".RDS")
saveRDS(chains_WST, file = filename_WST) #saving results
beep("coin")
}
#-----------------------------------------------------------------------------
# Simple model
#-----------------------------------------------------------------------------
if('Simple' %in% choose_model_to_estimate){
print(paste0("Estimation of Simple model, K=",K))
print(paste0("Begin cycle at:",date()))
estimation_control = list(z = 1,sigma_squared=0, mu_vec=0,K=0,P=1)
chains_Simple = adaptive_MCMC_orderstats(Y_ij = Y_ij, N_ij = N_ij ,
estimation_control = estimation_control,
ground_truth = ground_truth,
n = n, N_iter = N_iter,n_chains = n_chains,
optimal_acceptance_rate_P =optimal_acceptance_rate_P,
optimal_acceptance_rate_mu =optimal_acceptance_rate_mu,
K = K_chains,
seed = chains_seeds, model = 'Simple',t=t_chains, custom_init = NA)
my_names <- paste0("chain", 1:n_chains)
names(chains_Simple)<- my_names
filename_Simple <- paste0("./results/simulation/",true_model,"_true//True_Model",true_model,"Est_model_Simple","_N", n,"_K", K,".RDS")
saveRDS(chains_Simple, file = filename_Simple) #saving results
beep("coin")
}
}
for(file in 1:length(sorted_names)){
data_to_be_estimated <- readRDS(paste0(data_directory,"/",filenames[file]))
data_to_be_estimated$data_plot
stopifnot(data_to_be_estimated$model == true_model)
N_ij = data_to_be_estimated$N_ij
n = nrow(N_ij)
Y_ij = data_to_be_estimated$Y_ij
ground_truth =data_to_be_estimated$ground_truth
K= nrow(data_to_be_estimated$ground_truth$P)
print(paste0("True data--->", filenames[file]))
##############################################################################
# Estimation: set the parameters of the estimation
##############################################################################
n_chains = 4
optimal_acceptance_rate_P =.44
optimal_acceptance_rate_mu = .234
N_iter= 100000
chains_seeds = list(20,21,22,23)
#-----------------------------------------------------------------------------
# SST MODEL
#-----------------------------------------------------------------------------
if('SST' %in% choose_model_to_estimate){
print(paste0("Estimation of the SST model, K=",K))
print(paste0("Begin cycle at:", date()))
#initializing each chain
estimation_control = list(z = 1,sigma_squared=0, mu_vec=1,K=0,P=1)
K_chains = list(K,K,K,K)
t_chains = rep(1,n_chains)
chains_SST = adaptive_MCMC_orderstats(Y_ij = Y_ij, N_ij = N_ij ,
estimation_control = estimation_control,
ground_truth = ground_truth,
n = n, N_iter = N_iter,n_chains = n_chains,
optimal_acceptance_rate_P =optimal_acceptance_rate_P,
optimal_acceptance_rate_mu =optimal_acceptance_rate_mu,
K = K_chains,
seed = chains_seeds, model = 'SST', t= t_chains, custom_init = NA)
my_names<- paste0("chain", 1:n_chains)
names(chains_SST)<-my_names
filename_SST <- paste0("./results/simulation/",true_model,"_true//True_Model",true_model,"Est_model_SST","N", n,"_K", K,".RDS")
saveRDS(chains_SST, file = filename_SST) #saving results
beep("coin")
}
#-----------------------------------------------------------------------------
# WST MODEL
#-----------------------------------------------------------------------------
if('WST' %in% choose_model_to_estimate){
print(paste0("Estimation of the WST model, K=",K))
print(paste0("Begin cycle at:",date()))
#initializing each chain
estimation_control = list(z = 1,sigma_squared=1, mu_vec=1,K=0,P=1)
chains_WST = adaptive_MCMC_orderstats(Y_ij = Y_ij, N_ij = N_ij ,
estimation_control = estimation_control,
ground_truth = ground_truth,
n = n, N_iter = N_iter,n_chains = n_chains,
optimal_acceptance_rate_P =optimal_acceptance_rate_P,
optimal_acceptance_rate_mu =optimal_acceptance_rate_mu,
K = K_chains,
seed = chains_seeds, model = 'WST',t=t_chains, custom_init = NA)
my_names <- paste0("chain", 1:n_chains)
names(chains_WST)<-my_names
filename_WST <- paste0("./results/simulation/",true_model,"_true//True_Model",true_model,"Est_model_WST","_N", n,"_K", K,".RDS")
saveRDS(chains_WST, file = filename_WST) #saving results
beep("coin")
}
#-----------------------------------------------------------------------------
# Simple model
#-----------------------------------------------------------------------------
if('Simple' %in% choose_model_to_estimate){
print(paste0("Estimation of Simple model, K=",K))
print(paste0("Begin cycle at:",date()))
estimation_control = list(z = 1,sigma_squared=0, mu_vec=0,K=0,P=1)
chains_Simple = adaptive_MCMC_orderstats(Y_ij = Y_ij, N_ij = N_ij ,
estimation_control = estimation_control,
ground_truth = ground_truth,
n = n, N_iter = N_iter,n_chains = n_chains,
optimal_acceptance_rate_P =optimal_acceptance_rate_P,
optimal_acceptance_rate_mu =optimal_acceptance_rate_mu,
K = K_chains,
seed = chains_seeds, model = 'Simple',t=t_chains, custom_init = NA)
my_names <- paste0("chain", 1:n_chains)
names(chains_Simple)<- my_names
filename_Simple <- paste0("./results/simulation/",true_model,"_true//True_Model",true_model,"Est_model_Simple","_N", n,"_K", K,".RDS")
saveRDS(chains_Simple, file = filename_Simple) #saving results
beep("coin")
}
}
print('Simulation study for fixed K, for K=3,4,5,6')
is.simulation=T
print('Simulation study for fixed K, for K=3,4,5,6')
is.simulation=T
data_directory = "./Data/Simulation_data/"
