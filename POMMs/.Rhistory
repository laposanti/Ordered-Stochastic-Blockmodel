z <- sample(1:K, n,replace=T)
z_P<- vec2mat_0_P(clust_lab = z,P = P)
P_nbyn<- calculate_victory_probabilities(z_mat = z_P,P = P)
N_blocks = matrix(sample(x = (6:12),size = K**2,replace = T), nrow = K,ncol = K)
N_blocks = make_symmetric(N_blocks)
N_ij= calculate_victory_probabilities(z_mat = z_P,P = N_blocks)
diag(N_ij) = 0
#simulating Y_ij
Y_ij <- matrix(0, n,n)
for(i in 1:n){
for(j in 1:n){
Y_ij[i,j]<-rbinom(1,N_ij[i,j], P_nbyn[i,j])
}
}
Y_ij[lower.tri(Y_ij)] = N_ij[lower.tri(N_ij)] - t(Y_ij)[lower.tri(Y_ij)]
diag(Y_ij)<- 0
indices <- expand.grid(row = 1:n, col = 1:n)
z_df <- data.frame(items = 1:n,
z = z)
# Convert the matrix to a data frame
z_df_complete <- data.frame(
row = indices$row,
col = indices$col,
similarity_value = NA,
Y = NA
)
for (i in seq_len(nrow(z_df_complete))) {
z_df_complete$Y[i] <- Y_ij[z_df_complete$col[i], z_df_complete$row[i]]
}
plot_df = z_df_complete%>%
inner_join(z_df, by = c("row" = "items")) %>%
rename(row_z = z) %>%
inner_join(z_df, by = c("col" = "items")) %>%
rename(col_z = z) %>%
mutate(row = factor(row, levels = unique(row[order(row_z, row)])),
col = factor(col, levels = unique(col[order(col_z, col, decreasing = TRUE)])))
adjacency_m<- ggplot(plot_df, aes(x = row, y = col)) +
geom_tile(aes(fill = Y), color = "gray", show.legend = FALSE) +
scale_fill_gradient(low = "white", high = "black") +
geom_ysidetile(aes(color = factor(col_z)), show.legend = FALSE, width = 0.5) +
theme_minimal() +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
print(adjacency_m)
if(true_model == 'SST'){
ground_truth = list(z = z,
sigma_squared=NA,
mu_vec_star = mu_vec,
K=K,theta=theta,
model = true_model)
}else if(true_model == 'WST'){
ground_truth = list(z = z,
sigma_squared=sigma_squared,
mu_vec_star = mu_vec,
K=K,theta=theta,
model = true_model)
}else if(true_model == 'Simple'){
ground_truth = list(z = z,
sigma_squared=NA,
mu_vec_star = NA,
K=K,
theta=theta,
model = true_model)
}
to_be_saved = list(Y_ij=Y_ij, N_ij =N_ij, ground_truth = ground_truth,
data_plot = adjacency_m,
seed=seed)
saveRDS(to_be_saved, paste0(saving_directory, true_model, K,"_data",n_simul,".RDS"))
}
}
filenames <- list.files(pattern = true_model,path =data_directory)
setwd("/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/")
source("./model_auxiliary_functions/Functions_priorSST.R")
source("./Metropolis_within_Gibbs_code_powerposterior.R")
source("./model_auxiliary_functions/MCMC_functions.R")
print('Simulation study for fixed K, for K=3,4,5,6')
is.simulation=T
data_directory = "./Data/Sim1_data/"
filenames <- list.files(pattern = true_model,path =data_directory)
print(filenames) #data to be estimated
true_model ='SST'
filenames <- list.files(pattern = true_model,path =data_directory)
print(filenames) #data to be estimated
file=1
data_to_be_estimated <- readRDS(paste0(data_directory,"/",filenames[file]))
data_to_be_estimated$ground_truth$theta
true_model ='WST'
filenames <- list.files(pattern = true_model,path =data_directory)
print(filenames) #data to be estimated
my_filename = paste0(saving_directory, '/MCMC_output/Fixed_K/Simulation', model, "/est_model",est_model,"_Kest",K_est[[1]],'.rds')
my_filename = paste0(saving_directory, '/MCMC_output/Fixed_K/Simulation/Data_from',data_description, "_est_model",est_model,"_Kest",K_est[[1]],'.rds')
K= nrow(data_to_be_estimated$ground_truth$theta)
data_description = paste0(true_model,K)
my_names <- paste0("chain", 1:n_chains)
names(chains_SST)<- my_names
my_filename = paste0(saving_directory, '/MCMC_output/Fixed_K/Simulation/Data_from',data_description, "_est_model",est_model,"_Kest",K_est[[1]],'.rds')
saveRDS(object = chains_SST, file = my_filename)
my_filename
my_filename = paste0(saving_directory, '/MCMC_output/Fixed_K/Simulation/Data_from',data_description, "_est_model",est_model,"_Kest",K_est[[1]],'.rds')
my_names <- paste0("chain", 1:n_chains)
names(chains_SST)<- my_names
my_filename = paste0(saving_directory, '/MCMC_output/Fixed_K/Simulation/Data_from',data_description, "_est_model",est_model,"_Kest",K_est[[1]],'.rds')
saveRDS(object = chains_SST, file = my_filename)
beep("coin")
my_filename = paste0(saving_directory, '/MCMC_output/Fixed_K/Simulation/Data_from',data_description, "_est_model",est_model,"_Kest",K_est[[1]],'.rds')
est_model='SST'
my_names <- paste0("chain", 1:n_chains)
names(chains_SST)<- my_names
my_filename = paste0(saving_directory, '/MCMC_output/Fixed_K/Simulation/Data_from',data_description, "_est_model",est_model,"_Kest",K_est[[1]],'.rds')
saveRDS(object = chains_SST, file = my_filename)
K_est=3
my_names <- paste0("chain", 1:n_chains)
names(chains_SST)<- my_names
my_filename = paste0(saving_directory, '/MCMC_output/Fixed_K/Simulation/Data_from',data_description, "_est_model",est_model,"_Kest",K_est[[1]],'.rds')
saveRDS(object = chains_SST, file = my_filename)
my_filename
setwd("/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/")
source("./model_auxiliary_functions/Functions_priorSST.R")
source("./Metropolis_within_Gibbs_code_powerposterior.R")
source("./model_auxiliary_functions/MCMC_functions.R")
my_filename = paste0(, './results/MCMC_output/Fixed_K/Simulation/Data_from',data_description, "_est_model",est_model,"_Kest",K_est[[1]],'.rds')
my_filename = paste0('./results/MCMC_output/Fixed_K/Simulation/Data_from',data_description, "_est_model",est_model,"_Kest",K_est[[1]],'.rds')
my_filename
names(chains_SST)<- my_names
my_filename = paste0('./results/MCMC_output/Fixed_K/Simulation/Data_from',data_description, "_est_model",est_model,"_Kest",K_est[[1]],'.rds')
saveRDS(object = chains_SST, file = my_filename)
beep("coin")
source("~/Desktop/Nial/POMM_pairwise/POMMs/Simulation_launcher.R", echo=TRUE)
warnings()
filenames <- list.files(pattern = true_model,path =data_directory)
print(filenames) #data to be estimated
data_directory = "./Data/Sim1_data/"
filenames <- list.files(pattern = true_model,path =data_directory)
print(filenames) #data to be estimated
data_to_be_estimated = readRDS(filenames[1])
data_to_be_estimated = readRDS(paste0(data_directory,filenames[1]))
data_to_be_estimated
chains_seed <- list()
for(i in 1:length(K_est)){
chains_seed[[i]] = seed + i
}
if(power_posterior_apprach == T){
n_temperatures=50
}
where_to_save =list()
for(i in 1:length(K_est)){
if(power_posterior_apprach==T){
where_to_save[[i]] =  file.path(saving_directory, paste0("/MCMC_output/powerposterior/Data_",data_description,"/Est_",model,"/K", K_est[[i]],"/"))}
else{
where_to_save[[i]] =  file.path(saving_directory, paste0("/MCMC_output/Fixed_K/"))
}
dir.create(where_to_save[[i]], showWarnings = T, recursive = T)
}
source("~/Desktop/Nial/POMM_pairwise/POMMs/Simulation_launcher.R", echo=TRUE)
source("~/Desktop/Nial/POMM_pairwise/POMMs/Simulation_launcher.R", echo=TRUE)
source("~/Desktop/Nial/POMM_pairwise/POMMs/Simulation_launcher.R", echo=TRUE)
source("~/Desktop/Nial/POMM_pairwise/POMMs/Simulation_launcher.R", echo=TRUE)
source("~/Desktop/Nial/POMM_pairwise/POMMs/Simulation_launcher.R", echo=TRUE)
for(file in 1:length(filenames)){
data_to_be_estimated = readRDS(paste0(data_directory,filenames[file]))
stopifnot(data_to_be_estimated$model == true_model)
N_ij = data_to_be_estimated$N_ij
n = nrow(N_ij)
Y_ij = data_to_be_estimated$Y_ij
ground_truth =data_to_be_estimated$ground_truth
K= nrow(data_to_be_estimated$ground_truth$theta)
data_description = paste0(true_model,K)
print(paste0("True data--->", filenames[file]))
##############################################################################
# Estimation: set the parameters of the estimation
##############################################################################
n_chains = 4
optimal_acceptance_rate_theta =.44
optimal_acceptance_rate_mu = .234
seed=20
N_iter <- 400 #number of iterations
burnin <- 100 #number of discarded iterations
K_est = rep(K, n_chains) #number of clusters to fit
is.simulation=T
print(paste0("True data--->", filenames[file], "\n"))
#-----------------------------------------------------------------------------
# SST MODEL
#-----------------------------------------------------------------------------
if('SST' %in% choose_model_to_estimate){
print(paste0("Estimation of the SST model, K=",K))
print(paste0("Begin cycle at:", date()))
est_model = 'SST'
#setting up the chain hyperparameter
#where to save the data
saving_directory = "./Results/"
#Boolean: power_posterior_approach = T estimates the marginal likelihood via power posteriors
power_posterior_apprach = F
custom_init <- NA
print(paste0("Estimation of the SST model, K=", K_est))
print(paste0("Begin cycle at:", date(), "\n"))
estimation_control <- list(z = 1, sigma_squared = 0, mu_vec = 1 ,K = 0, theta = 1)
chains_SST <- adaptive_MCMC_orderstats_powerposterior(Y_ij = Y_ij, N_ij = N_ij,
saving_directory = saving_directory,
estimation_control = estimation_control,
burnin = burnin,
ground_truth = ground_truth,
n = n, N_iter = N_iter,
K_est = K_est,data_description = data_description,
seed = seed,
model = est_model,
custom_init = custom_init,
power_posterior_apprach = power_posterior_apprach)
my_names <- paste0("chain", 1:n_chains)
names(chains_SST)<- my_names
my_filename = paste0('./results/MCMC_output/Fixed_K/Simulation/Data_from',data_description, "_est_model",est_model,"_Kest",K_est[[1]],'.rds')
saveRDS(object = chains_SST, file = my_filename)
beep("coin")
}
#-----------------------------------------------------------------------------
# WST MODEL
#-----------------------------------------------------------------------------
if('WST' %in% choose_model_to_estimate){
print(paste0("Estimation of the WST model, K=",K))
print(paste0("Begin cycle at:",date()))
#initializing each chain
est_model = 'WST'
#setting up the chain hyperparameter
#where to save the data
saving_directory = "./Results/"
#Boolean: power_posterior_approach = T estimates the marginal likelihood via power posteriors
power_posterior_apprach = F
custom_init <- NA
print(paste0("Estimation of the WST model, K=", K_est))
print(paste0("Begin cycle at:", date(), "\n"))
estimation_control <- list(z = 1, sigma_squared = 1, mu_vec = 1 ,K = 0, theta = 1)
chains_WST <- adaptive_MCMC_orderstats_powerposterior(Y_ij = Y_ij, N_ij = N_ij,
saving_directory = saving_directory,
estimation_control = estimation_control,
burnin = burnin,
ground_truth = ground_truth,
n = n, N_iter = N_iter,
K_est = K_est,data_description = data_description,
seed = seed,
model = est_model,
custom_init = custom_init,
power_posterior_apprach = power_posterior_apprach)
my_names <- paste0("chain", 1:n_chains)
names(chains_WST)<-my_names
my_filename = paste0('./results/MCMC_output/Fixed_K/Simulation/Data_from',data_description, "_est_model",est_model,"_Kest",K_est[[1]],'.rds')
saveRDS(object = chains_WST, file = my_filename)
beep("coin")
}
#-----------------------------------------------------------------------------
# Simple model
#-----------------------------------------------------------------------------
if('Simple' %in% choose_model_to_estimate){
print(paste0("Estimation of Simple model, K=",K))
print(paste0("Begin cycle at:",date()))
est_model = 'Simple'
#setting up the chain hyperparameter
#where to save the data
saving_directory = "./Results/"
#Boolean: power_posterior_approach = T estimates the marginal likelihood via power posteriors
power_posterior_apprach = F
custom_init <- NA
estimation_control = list(z = 1,sigma_squared=0, mu_vec=0,K=0,theta=1)
chains_Simple = adaptive_MCMC_orderstats_powerposterior(Y_ij = Y_ij, N_ij = N_ij,
saving_directory = saving_directory,
estimation_control = estimation_control,
burnin = burnin,
ground_truth = ground_truth,
n = n, N_iter = N_iter,
K_est = K_est,data_description = data_description,
seed = seed,
model = est_model,
custom_init = custom_init,
power_posterior_apprach = power_posterior_apprach)
my_names <- paste0("chain", 1:n_chains)
names(chains_Simple)<- my_names
my_filename = paste0('./results/MCMC_output/Fixed_K/Simulation/Data_from',data_description, "_est_model",est_model,"_Kest",K_est[[1]],'.rds')
saveRDS(object = chains_Simple, file = my_filename)
beep("coin")
}
}
K
data_to_be_estimated = readRDS(paste0(data_directory,filenames[file]))
stopifnot(data_to_be_estimated$model == true_model)
N_ij = data_to_be_estimated$N_ij
n = nrow(N_ij)
Y_ij = data_to_be_estimated$Y_ij
K
file
#-----------------------------------------------------------------------------
# read the files in the selected folder, estimate the SST, the WST and the Simple model
#-----------------------------------------------------------------------------
file=3
data_to_be_estimated = readRDS(paste0(data_directory,filenames[file]))
stopifnot(data_to_be_estimated$model == true_model)
N_ij = data_to_be_estimated$N_ij
n = nrow(N_ij)
Y_ij = data_to_be_estimated$Y_ij
ground_truth =data_to_be_estimated$ground_truth
K= nrow(data_to_be_estimated$ground_truth$theta)
data_description = paste0(true_model,K)
print(paste0("True data--->", filenames[file]))
K
data_to_be_estimated
source("~/Desktop/Nial/POMM_pairwise/POMMs/Simulation_launcher.R", echo=TRUE)
source("~/Desktop/Nial/POMM_pairwise/POMMs/Application_laucher.R", echo=TRUE)
print(paste0('Estimating now:',data_description))
print(paste0("True data--->", filenames[file], "\n"))
setwd("/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/")
source("./model_auxiliary_functions/Functions_priorSST.R")
source("./Metropolis_within_Gibbs_code.R")
source("./model_auxiliary_functions/MCMC_functions.R")
#choose between citation exchange data and tennis data
#citation data::: set true_model =  "Citation_data"
#tennis data::: tennis data = 'Tennis_data'
for(data_description in c("Tennis_data","Citation_data")){
###############################################################################
# uploading data
###############################################################################
if(data_description == 'Tennis_data'){
Y_ij <- read.table("./Data/Tennis application/Y_ij.csv",header  = F,row.names = 1,sep = ",")
N_ij <- read.table("./Data/Tennis application/N_ij.csv",header  = F,row.names = 1,sep = ",")
Y_ij = as.matrix(Y_ij)
N_ij = as.matrix(N_ij)
}else if(data_description == 'Citation_data'){
Y_ij <- read.csv("./Data/Citations_application/cross-citation-matrix.csv",header = T,row.names = 1)
diag(Y_ij) = 0
N_ij= matrix(0,47,47) +Y_ij*upper.tri(Y_ij)+t(Y_ij)*upper.tri(Y_ij)+Y_ij*lower.tri(Y_ij)+t(Y_ij)*lower.tri(Y_ij)
Y_ij = as.matrix(Y_ij)
N_ij = as.matrix(N_ij)
}
#chosing where to save the files depending on which model you are estimating
#data to be estimated
K_values <- c(3,4,5,6,7)  # Range of K values to explore
print(paste0('Fitting now:' , data_description))
choose_model_to_estimate = c('SST', 'WST','Simple')
#-----------------------------------------------------------------------------
# read the files in the selected folder, estimate the SST, the WST and the Simple model
#-----------------------------------------------------------------------------
for(k_th in K_values){
##############################################################################
# Estimation: set the parameters of the estimation
##############################################################################
ground_truth = NA
n = nrow(N_ij)
n_chains = 4
optimal_acceptance_rate_theta =.44
optimal_acceptance_rate_mu = .234
N_iter= 120000
burnin= 80000
chains_seeds = list(30,31,32,33)
#-----------------------------------------------------------------------------
# SST MODEL
#-----------------------------------------------------------------------------
n_chains = 4
optimal_acceptance_rate_theta =.44
optimal_acceptance_rate_mu = .234
seed=20
N_iter <- 400 #number of iterations
burnin <- 100 #number of discarded iterations
K_est = rep(k_th, n_chains) #number of clusters to fit
is.simulation=T
print(paste0("True data--->", filenames[file], "\n"))
#-----------------------------------------------------------------------------
# SST MODEL
#-----------------------------------------------------------------------------
if('SST' %in% choose_model_to_estimate){
print(paste0("Estimation of the SST model, K=",K))
print(paste0("Begin cycle at:", date()))
est_model = 'SST'
#setting up the chain hyperparameter
#where to save the data
saving_directory = "./Results/"
#Boolean: power_posterior_approach = T estimates the marginal likelihood via power posteriors
power_posterior_apprach = F
custom_init <- NA
print(paste0("Estimation of the SST model, K=", K_est))
print(paste0("Begin cycle at:", date(), "\n"))
estimation_control <- list(z = 1, sigma_squared = 0, mu_vec = 1 ,K = 0, theta = 1)
chains_SST <- adaptive_MCMC_orderstats_powerposterior(Y_ij = Y_ij, N_ij = N_ij,
saving_directory = saving_directory,
estimation_control = estimation_control,
burnin = burnin,
ground_truth = ground_truth,
n = n, N_iter = N_iter,
K_est = K_est,data_description = data_description,
seed = seed,
model = est_model,
custom_init = custom_init,
power_posterior_apprach = power_posterior_apprach)
my_names <- paste0("chain", 1:n_chains)
names(chains_SST)<- my_names
my_filename = paste0('./results/MCMC_output/Fixed_K/Application/Data_from',data_description, "_est_model",est_model,"_Kest",K_est[[1]],'.rds')
saveRDS(object = chains_SST, file = my_filename)
beep("coin")
}
#-----------------------------------------------------------------------------
# WST MODEL
#-----------------------------------------------------------------------------
if('WST' %in% choose_model_to_estimate){
print(paste0("Estimation of the WST model, K=",K))
print(paste0("Begin cycle at:",date()))
#initializing each chain
est_model = 'WST'
#setting up the chain hyperparameter
#where to save the data
saving_directory = "./Results/"
#Boolean: power_posterior_approach = T estimates the marginal likelihood via power posteriors
power_posterior_apprach = F
custom_init <- NA
print(paste0("Estimation of the WST model, K=", K_est))
print(paste0("Begin cycle at:", date(), "\n"))
estimation_control <- list(z = 1, sigma_squared = 1, mu_vec = 1 ,K = 0, theta = 1)
chains_WST <- adaptive_MCMC_orderstats_powerposterior(Y_ij = Y_ij, N_ij = N_ij,
saving_directory = saving_directory,
estimation_control = estimation_control,
burnin = burnin,
ground_truth = ground_truth,
n = n, N_iter = N_iter,
K_est = K_est,data_description = data_description,
seed = seed,
model = est_model,
custom_init = custom_init,
power_posterior_apprach = power_posterior_apprach)
my_names <- paste0("chain", 1:n_chains)
names(chains_WST)<-my_names
my_filename = paste0('./results/MCMC_output/Fixed_K/Application/Data_from',data_description, "_est_model",est_model,"_Kest",K_est[[1]],'.rds')
saveRDS(object = chains_WST, file = my_filename)
beep("coin")
}
#-----------------------------------------------------------------------------
# Simple model
#-----------------------------------------------------------------------------
if('Simple' %in% choose_model_to_estimate){
print(paste0("Estimation of Simple model, K=",K))
print(paste0("Begin cycle at:",date()))
est_model = 'Simple'
#setting up the chain hyperparameter
#where to save the data
saving_directory = "./Results/"
#Boolean: power_posterior_approach = T estimates the marginal likelihood via power posteriors
power_posterior_apprach = F
custom_init <- NA
estimation_control = list(z = 1,sigma_squared=0, mu_vec=0,K=0,theta=1)
chains_Simple = adaptive_MCMC_orderstats_powerposterior(Y_ij = Y_ij, N_ij = N_ij,
saving_directory = saving_directory,
estimation_control = estimation_control,
burnin = burnin,
ground_truth = ground_truth,
n = n, N_iter = N_iter,
K_est = K_est,data_description = data_description,
seed = seed,
model = est_model,
custom_init = custom_init,
power_posterior_apprach = power_posterior_apprach)
my_names <- paste0("chain", 1:n_chains)
names(chains_Simple)<- my_names
my_filename = paste0('./results/MCMC_output/Fixed_K/Application/Data_from',data_description, "_est_model",est_model,"_Kest",K_est[[1]],'.rds')
saveRDS(object = chains_Simple, file = my_filename)
beep("coin")
}
}
}
Y_ij <- read.table("./Data/Tennis application/Y_ij.csv",header  = F,row.names = 1,sep = ",")
N_ij <- read.table("./Data/Tennis application/N_ij.csv",header  = F,row.names = 1,sep = ",")
Y_ij = as.matrix(Y_ij)
N_ij = as.matrix(N_ij)
K_values <- c(3,4,5,6,7)  # Range of K values to explore
print(paste0('Fitting now:' , data_description))
choose_model_to_estimate = c('SST', 'WST','Simple')
##############################################################################
# Estimation: set the parameters of the estimation
##############################################################################
ground_truth = NA
n = nrow(N_ij)
n_chains = 4
optimal_acceptance_rate_theta =.44
optimal_acceptance_rate_mu = .234
N_iter= 120000
burnin= 80000
chains_seeds = list(30,31,32,33)
#-----------------------------------------------------------------------------
# SST MODEL
#-----------------------------------------------------------------------------
n_chains = 4
optimal_acceptance_rate_theta =.44
optimal_acceptance_rate_mu = .234
n_chains = 4
optimal_acceptance_rate_theta =.44
optimal_acceptance_rate_mu = .234
seed=20
N_iter <- 400 #number of iterations
burnin <- 100 #number of discarded iterations
K_est = rep(k_th, n_chains) #number of clusters to fit
is.simulation=T
print(paste0("True data--->", filenames[file], "\n"))
print(paste0("Estimation of the SST model, K=",K))
print(paste0("Begin cycle at:", date()))
est_model = 'SST'
#where to save the data
saving_directory = "./Results/"
#where to save the data
saving_directory = "./Results/"
#Boolean: power_posterior_approach = T estimates the marginal likelihood via power posteriors
power_posterior_apprach = F
custom_init <- NA
print(paste0("Estimation of the SST model, K=", K_est))
print(paste0("True data--->", filenames[file], "\n"))
source("~/Desktop/Nial/POMM_pairwise/POMMs/Application_laucher.R", echo=TRUE)
source("~/Desktop/Nial/POMM_pairwise/POMMs/Application_launcherSimple_Tennis.R", echo=TRUE)
source("~/Desktop/Nial/POMM_pairwise/POMMs/Application_launcherSimple_Tennis.R", echo=TRUE)
print('Simulation study for fixed K, for K=3,4,5,6')
