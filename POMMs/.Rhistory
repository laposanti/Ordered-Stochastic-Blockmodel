select(player,rank)
player_list105 = player_list_alphabet_sorted %>%
filter(median_rank < 95) %>%
left_join(name_id_df, by=c('players'='player')) %>%
left_join(df_rank_sum, by = c('id' = 'player'))
player_list105
saveRDS(player_list105,"./Data/Tennis application/median_rank105.rds" )
#where the data are stored
setwd('/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/')
Y_ij <-readRDS("./Data/Tennis application/Y_new.rds")
N_ij <-readRDS("./Data/Tennis application/N_new.rds")
median_rank  <-readRDS("./Data/Tennis application/median_rank105.rds")
Y_ij = as.matrix(Y_ij)
N_ij = as.matrix(N_ij)
data_wd<- "/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/results/MCMC_output/Fixed_K/Application/"
#where the data are saved
processed_wd <- "/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/results/MCMC_output/Fixed_K/Application/processed/Tennis/"
df_rank <- readRDS("/Users/lapo_santi/Desktop/Nial/weekly material/Tennis application/data/df_rank.RData")
ranks= df_rank   %>%
filter(week_year==2017)
df_match <- readRDS("/Users/lapo_santi/Desktop/Nial/weekly material/Tennis application/data/df_match.RData")
ranks= df_rank   %>%
filter(week_year==2017)  %>% group_by() %>% summarise(median_rank = median(rank_number),
max_r = max(rank_number),
min_r = min(rank_number))
top100players = ranks %>% filter(median_rank <= 100) %>% arrange(median_rank)
players_df = data.frame(Id = rownames(Y_ij))
colnames(Y_ij) <- rownames(Y_ij)
rownames(N_ij) <- rownames(Y_ij)
colnames(N_ij) <- rownames(N_ij)
indices <- expand.grid(row = rownames(Y_ij), col = colnames(Y_ij))
# Convert the matrix to a data frame
z_df_complete <- data.frame(
row = as.character(indices$row),
col = as.character(indices$col),
Y = NA
)
for (i in seq_len(nrow(z_df_complete))) {
z_df_complete$Y[i] <- Y_ij[z_df_complete$row[i], z_df_complete$col[i]]
}
for (i in seq_len(nrow(z_df_complete))) {
z_df_complete$degree_pl_row[i] <- sum(Y_ij[z_df_complete$row[i],],na.rm = T)/sum(Y_ij[,z_df_complete$row[i]],na.rm = T)
}
for (i in seq_len(nrow(z_df_complete))) {
z_df_complete$N[i] <- N_ij[z_df_complete$row[i], z_df_complete$col[i]]
}
z_df_complete$L = (z_df_complete$N -  z_df_complete$Y)
Y_mat = matrix(z_df_complete$Y,ncol=1)
L_mat = matrix(z_df_complete$L,ncol=1)
BT_mat = cbind(Y_mat,L_mat)
player2 = factor(z_df_complete$col, levels = unique(c(z_df_complete$row, z_df_complete$col)))
player1 = factor(z_df_complete$row, levels = unique(c(z_df_complete$row, z_df_complete$col)))
library(BradleyTerry2)
BTM = BTm(outcome = BT_mat,player1 =player1 ,player2 =player2)
abilities = BTabilities(BTM)
bt_rank_df = data.frame(Id = rownames(abilities)[order(abilities[,1])], BTrank = nrow(Y_ij):1)
players_df = players_df %>% inner_join(bt_rank_df, by = 'Id') %>%
mutate(degree_pl = rowSums(Y_ij)/colSums(Y_ij))%>%
inner_join(median_rank, by = c('Id' = 'players'))
comparison = plot(players_df$median_rank,players_df$BTrank)
comparison = plot(players_df$rank,players_df$BTrank)
library(dplyr)
library(dplyr)
library(ggplo2)
df_matches = read.csv('/Users/lapo_santi/Downloads/archive/atp_matches_till_2022.csv')
df_rank = read.csv('/Users/lapo_santi/Downloads/archive/atp_rankings_till_2022.csv')
library(ggplot2)
df_matches = read.csv('/Users/lapo_santi/Downloads/archive/atp_matches_till_2022.csv')
df_rank = read.csv('/Users/lapo_santi/Downloads/archive/atp_rankings_till_2022.csv')
# Define the start and end dates for the 2016/2017 season
start_date <- as.Date('2016-12-29')
end_date <- as.Date('2017-11-29')
end_of_season<- as.Date('2017-10-29')
df_rank_sum = df_rank%>%
mutate(ranking_date = as.Date(as.character(ranking_date), format="%Y%m%d")) %>%
filter(between(ranking_date,start_date, end_date))%>%
group_by(player) %>%
filter(ranking_date == max(ranking_date)) %>%
select(player,rank)%>%
rename(last_rank = rank)
matches_2017 = df_matches%>%
mutate(tourney_date = as.Date(as.character(tourney_date), format="%Y%m%d"))%>%
filter(tourney_date >= start_date & tourney_date <= end_date)
name_id_df = matches_2017 %>% select(winner_name, winner_id)%>%
rename(player = winner_name, id = winner_id)%>%
rbind(data.frame( player = matches_2017$loser_name, id = matches_2017$loser_id))%>%
distinct(player,id)
player_list_alphabet = unique(c(matches_2017$winner_name,matches_2017$loser_name))
player_list_alphabet_sorted = data.frame(players = sort(player_list_alphabet), median_rank=NA)
for(p in 1:nrow(player_list_alphabet_sorted)){
pl_t =  player_list_alphabet_sorted$players[p]
rank_player_t = vector()
for(t in 1:nrow(matches_2017)){
if(matches_2017$winner_name[t] == pl_t){
rank_player_t = append(rank_player_t, matches_2017$winner_rank[t])
}else if(matches_2017$loser_name[t] ==pl_t){
rank_player_t = append(rank_player_t, matches_2017$loser_rank[t])
}
}
player_list_alphabet_sorted$median_rank[p] <- median(rank_player_t)
}
player_list105 = player_list_alphabet_sorted %>%
filter(median_rank < 95) %>%
left_join(name_id_df, by=c('players'='player')) %>%
left_join(df_rank_sum, by = c('id' = 'player'))
which.max(player_list105$median_rank)
mean_rank = matches_2017 %>%
filter(winner_name %in% player_list105$players & loser_name %in% player_list105$players)
n= nrow(player_list105)
Y_matrix = matrix(0, nrow = n , ncol = n)
rownames(Y_matrix)<- player_list105$players
colnames(Y_matrix)<- player_list105$players
N_matrix = matrix(0, nrow = n , ncol = n)
rownames(N_matrix)<- player_list105$players
colnames(N_matrix)<- player_list105$players
for(t in 1:nrow(mean_rank)){
i<- mean_rank$winner_name[t]
j<- mean_rank$loser_name[t]
Y_matrix[i,j] = Y_matrix[i,j] + 1
N_matrix[i,j] = N_matrix[i,j] + 1
N_matrix[j,i] = N_matrix[j,i] + 1
}
which(rowSums(Y_matrix)==0)
which(colSums(Y_matrix)==0)
player_list105
player_list105 = player_list_alphabet_sorted %>%
filter(median_rank < 95) %>%
left_join(name_id_df, by=c('players'='player')) %>%
left_join(df_rank_sum, by = c('id' = 'player'))
which.max(player_list105$median_rank)
mean_rank = matches_2017 %>%
filter(winner_name %in% player_list105$players & loser_name %in% player_list105$players)
n= nrow(player_list105)
Y_matrix = matrix(0, nrow = n , ncol = n)
rownames(Y_matrix)<- player_list105$players
colnames(Y_matrix)<- player_list105$players
N_matrix = matrix(0, nrow = n , ncol = n)
rownames(N_matrix)<- player_list105$players
colnames(N_matrix)<- player_list105$players
for(t in 1:nrow(mean_rank)){
i<- mean_rank$winner_name[t]
j<- mean_rank$loser_name[t]
Y_matrix[i,j] = Y_matrix[i,j] + 1
N_matrix[i,j] = N_matrix[i,j] + 1
N_matrix[j,i] = N_matrix[j,i] + 1
}
which(rowSums(Y_matrix)==0)
which(colSums(Y_matrix)==0)
similarity_plot(Y_matrix, player_list105$median_rank, player_list105$median_rank)
saveRDS(Y_matrix, "./Data/Tennis application/Y_new.rds")
saveRDS(N_matrix, "./Data/Tennis application/N_new.rds")
saveRDS(player_list105,"./Data/Tennis application/median_rank105.rds" )
source("~/Desktop/Nial/POMM_pairwise/POMMs/model_auxiliary_functions/reading_resultS.R", echo=TRUE)
#where the data are stored
setwd('/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/')
Y_ij <-readRDS("./Data/Tennis application/Y_new.rds")
N_ij <-readRDS("./Data/Tennis application/N_new.rds")
median_rank  <-readRDS("./Data/Tennis application/median_rank105.rds")
Y_ij = as.matrix(Y_ij)
N_ij = as.matrix(N_ij)
data_wd<- "/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/results/MCMC_output/Fixed_K/Application/"
#where the data are saved
processed_wd <- "/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/results/MCMC_output/Fixed_K/Application/processed/Tennis/"
players_df = data.frame(Id = rownames(Y_ij))
colnames(Y_ij) <- rownames(Y_ij)
rownames(N_ij) <- rownames(Y_ij)
colnames(N_ij) <- rownames(N_ij)
indices <- expand.grid(row = rownames(Y_ij), col = colnames(Y_ij))
# Convert the matrix to a data frame
z_df_complete <- data.frame(
row = as.character(indices$row),
col = as.character(indices$col),
Y = NA
)
for (i in seq_len(nrow(z_df_complete))) {
z_df_complete$Y[i] <- Y_ij[z_df_complete$row[i], z_df_complete$col[i]]
}
for (i in seq_len(nrow(z_df_complete))) {
z_df_complete$degree_pl_row[i] <- sum(Y_ij[z_df_complete$row[i],],na.rm = T)/sum(Y_ij[,z_df_complete$row[i]],na.rm = T)
}
for (i in seq_len(nrow(z_df_complete))) {
z_df_complete$N[i] <- N_ij[z_df_complete$row[i], z_df_complete$col[i]]
}
z_df_complete$L = (z_df_complete$N -  z_df_complete$Y)
Y_mat = matrix(z_df_complete$Y,ncol=1)
L_mat = matrix(z_df_complete$L,ncol=1)
BT_mat = cbind(Y_mat,L_mat)
player2 = factor(z_df_complete$col, levels = unique(c(z_df_complete$row, z_df_complete$col)))
player1 = factor(z_df_complete$row, levels = unique(c(z_df_complete$row, z_df_complete$col)))
library(BradleyTerry2)
BTM = BTm(outcome = BT_mat,player1 =player1 ,player2 =player2)
abilities = BTabilities(BTM)
bt_rank_df = data.frame(Id = rownames(abilities)[order(abilities[,1])], BTrank = nrow(Y_ij):1)
players_df = players_df %>% inner_join(bt_rank_df, by = 'Id') %>%
mutate(degree_pl = rowSums(Y_ij)/colSums(Y_ij))%>%
inner_join(median_rank, by = c('Id' = 'players'))
comparison = plot(players_df$rank,players_df$BTrank)
players_df$BTrank
players_df$rank
comparison = plot(players_df$last_rank, players_df$BTrank)
player_list105 = player_list_alphabet_sorted %>%
left_join(name_id_df, by=c('players'='player')) %>%
left_join(df_rank_sum, by = c('id' = 'player')) %>%
filter(last_rank < 95)
player_list105
player_list105 = player_list_alphabet_sorted %>%
left_join(name_id_df, by=c('players'='player')) %>%
left_join(df_rank_sum, by = c('id' = 'player')) %>%
filter(last_rank <= 95)
player_list105
which.max(player_list105$median_rank)
mean_rank = matches_2017 %>%
filter(winner_name %in% player_list105$players & loser_name %in% player_list105$players)
n= nrow(player_list105)
Y_matrix = matrix(0, nrow = n , ncol = n)
rownames(Y_matrix)<- player_list105$players
colnames(Y_matrix)<- player_list105$players
N_matrix = matrix(0, nrow = n , ncol = n)
rownames(N_matrix)<- player_list105$players
colnames(N_matrix)<- player_list105$players
for(t in 1:nrow(mean_rank)){
i<- mean_rank$winner_name[t]
j<- mean_rank$loser_name[t]
Y_matrix[i,j] = Y_matrix[i,j] + 1
N_matrix[i,j] = N_matrix[i,j] + 1
N_matrix[j,i] = N_matrix[j,i] + 1
}
which(rowSums(Y_matrix)==0)
which(colSums(Y_matrix)==0)
similarity_plot(Y_matrix, player_list105$median_rank, player_list105$median_rank)
saveRDS(Y_matrix, "./Data/Tennis application/Y_new.rds")
saveRDS(N_matrix, "./Data/Tennis application/N_new.rds")
saveRDS(player_list105,"./Data/Tennis application/median_rank105.rds" )
true_model = "Tennis_data"
if(true_model == "Tennis_data"){
#where the data are stored
setwd('/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/')
Y_ij <-readRDS("./Data/Tennis application/Y_new.rds")
N_ij <-readRDS("./Data/Tennis application/N_new.rds")
median_rank  <-readRDS("./Data/Tennis application/median_rank105.rds")
Y_ij = as.matrix(Y_ij)
N_ij = as.matrix(N_ij)
data_wd<- "/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/results/MCMC_output/Fixed_K/Application/"
#where the data are saved
processed_wd <- "/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/results/MCMC_output/Fixed_K/Application/processed/Tennis/"
players_df = data.frame(Id = rownames(Y_ij))
#now, for each game I want to filter just those players in the top one-hundred
colnames(Y_ij) <- rownames(Y_ij)
rownames(N_ij) <- rownames(Y_ij)
colnames(N_ij) <- rownames(N_ij)
indices <- expand.grid(row = rownames(Y_ij), col = colnames(Y_ij))
# Convert the matrix to a data frame
z_df_complete <- data.frame(
row = as.character(indices$row),
col = as.character(indices$col),
Y = NA
)
for (i in seq_len(nrow(z_df_complete))) {
z_df_complete$Y[i] <- Y_ij[z_df_complete$row[i], z_df_complete$col[i]]
}
for (i in seq_len(nrow(z_df_complete))) {
z_df_complete$degree_pl_row[i] <- sum(Y_ij[z_df_complete$row[i],],na.rm = T)/sum(Y_ij[,z_df_complete$row[i]],na.rm = T)
}
for (i in seq_len(nrow(z_df_complete))) {
z_df_complete$N[i] <- N_ij[z_df_complete$row[i], z_df_complete$col[i]]
}
z_df_complete$L = (z_df_complete$N -  z_df_complete$Y)
Y_mat = matrix(z_df_complete$Y,ncol=1)
L_mat = matrix(z_df_complete$L,ncol=1)
BT_mat = cbind(Y_mat,L_mat)
player2 = factor(z_df_complete$col, levels = unique(c(z_df_complete$row, z_df_complete$col)))
player1 = factor(z_df_complete$row, levels = unique(c(z_df_complete$row, z_df_complete$col)))
library(BradleyTerry2)
BTM = BTm(outcome = BT_mat,player1 =player1 ,player2 =player2)
abilities = BTabilities(BTM)
bt_rank_df = data.frame(Id = rownames(abilities)[order(abilities[,1])], BTrank = nrow(Y_ij):1)
players_df = players_df %>% inner_join(bt_rank_df, by = 'Id') %>%
mutate(degree_pl = rowSums(Y_ij)/colSums(Y_ij))%>%
inner_join(median_rank, by = c('Id' = 'players'))
#
#     my_df = data.frame(rank = players_df$BTrank, p_top = as.numeric(log(p)), cluster = factor(est_df$est_cl))
#
#     my_df %>%
#       ggplot(aes(x = rank, y = p_top, color = cluster))+
#       geom_point()+
#       labs(title = 'The posterior allocation log-probability to the top block',
#            y = 'Log p (top-block)',
#            x = 'Bradley - Terry Ranking')
#       theme_light()
#
#
comparison = plot(players_df$last_rank, players_df$BTrank)
}else if( true_model == 'Citation_data'){
data_wd<- "/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/results/MCMC_output/Fixed_K/Application/"
#where the data are saved
processed_wd <- "/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/results/MCMC_output/Fixed_K/Application/processed/Citations/"
scores=  read.csv("/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/Data/Citations_application/journal-scores.csv")
# Creating the data frame
journal_data <- data.frame(
Rank = 1:47,
Journal = c("JRSS-B", "AoS", "Bka", "JASA", "Bcs", "JRSS-A", "Bern", "SJS", "Biost", "JCGS",
"Tech", "AmS", "JTSA", "ISR", "AISM", "CJS", "StSin", "StSci", "LDA", "JRSS-C",
"StMed", "ANZS", "StCmp", "StataJ", "SPL", "StNee", "Envr", "JABES", "Mtka",
"StMod", "JSPI", "SMMR", "BioJ", "JMA", "EES", "CSDA", "JNS", "CmpSt", "Stats",
"Test", "CSTM", "JSS", "JBS", "JSCS", "CSSC", "StPap", "JAS"),
SM = c(2.09, 1.38, 1.29, 1.26, 0.85, 0.70, 0.69, 0.66, 0.66, 0.64, 0.53, 0.40, 0.37, 0.33,
0.32, 0.30, 0.29, 0.11, 0.10, 0.09, 0.06, 0.06, 0.04, 0.02, -0.09, -0.10, -0.11,
-0.16, -0.18, -0.22, -0.33, -0.35, -0.40, -0.45, -0.48, -0.52, -0.53, -0.64, -0.65,
-0.70, -0.74, -0.80, -0.83, -0.92, -1.26, -1.35, -1.41),
QSE = c(0.11, 0.07, 0.08, 0.06, 0.07, 0.19, 0.15, 0.12, 0.11, 0.12, 0.15, 0.18, 0.20, 0.25,
0.16, 0.14, 0.09, 0.11, 0.17, 0.15, 0.07, 0.21, 0.15, 0.33, 0.09, 0.25, 0.18, 0.23,
0.17, 0.21, 0.07, 0.16, 0.12, 0.08, 0.25, 0.07, 0.15, 0.22, 0.18, 0.15, 0.10, 0.19,
0.16, 0.15, 0.14, 0.20, 0.15),
SMgrouped = c(1.87, 1.17, 1.11, 1.11, 0.65, 0.31, 0.31, 0.31, 0.31, 0.31, 0.31, 0.04, 0.04,
0.04, 0.04, 0.04, 0.04, -0.04, -0.04, -0.04, -0.04, -0.04, -0.04, -0.04, -0.04,
-0.04, -0.04, -0.04, -0.04, -0.04, -0.31, -0.31, -0.31, -0.36, -0.36, -0.36,
-0.36, -0.36, -0.36, -0.36, -0.36, -0.36, -0.36,
-0.36, -0.88, -0.88, -0.88)
)
# Displaying the data frame
print(journal_data)
Y_ij=read.csv("/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/Data/Citations_application/cross-citation-matrix.csv",header = T,row.names = 1)
diag(Y_ij) = 0
N_ij= matrix(0,47,47) +Y_ij*upper.tri(Y_ij)+
t(Y_ij)*upper.tri(Y_ij)+Y_ij*lower.tri(Y_ij)+t(Y_ij)*lower.tri(Y_ij)
rownames(Y_ij) %in% scores[,1]
# Define the mapping between the acronyms in Y_ij and scores
acronym_mapping <- c("AmS" = "AmerStatist", "AISM" = "AnnInstStatMath", "AoS" = "AnnStat", "ANZS" = "ANZJStat",
"Bern" = "Bernoulli", "BioJ" = "BiometJ", "Bcs" = "Biometrics", "Bka" = "Biometrika",
"Biost" = "Biostatistics", "CJS" = "CanJStat", "CSSC" = "CommStatTM", "CSTM" = "CommStatTM",
"CmpSt" = "ComputatStat", "CSDA" = "CSDA", "EES" = "Econometrica", "Envr" = "Environmetrics",
"ISR" = "ISR", "JABES" = "JABES", "JASA" = "JASA", "JAS" = "JAP", "JBS" = "JbiopharmStat",
"JCGS" = "JCGS", "JMA" = "JMVA", "JNS" = "JRSSA", "JRSS-A" = "JRSSA", "JRSS-B" = "JRSSB",
"JRSS-C" = "JRSSC", "JSCS" = "JSCS", "JSPI" = "JSPI", "JSS" = "JStatSoft", "JTSA" = "JTSA",
"LDA" = "LDA", "Mtka" = "MCAP", "SJS" = "SJS", "StataJ" = "StatComput", "StCmp" = "StatMed",
"Stats" = "Statistics", "StMed" = "StatMed", "SMMR" = "SMMR", "StMod" = "StatMod", "StNee" = "StatNeerlandica",
"StPap" = "StatProbLett", "SPL" = "SPA", "StSci" = "StatSci", "StSin" = "StatSinica", "Tech" = "Technometrics",
"Test" = "TPA")
# Use mapvalues function to replace the entries
scores$shortName <- plyr::mapvalues(scores$shortName, from = acronym_mapping, to = names(acronym_mapping))
players_df = data.frame(Id = journal_data$Journal, points= journal_data$SM, median_rank = journal_data$Rank)
#now, for each game I want to filter just those players in the top one-hundred
colnames(Y_ij) <- rownames(Y_ij)
rownames(N_ij) <- rownames(Y_ij)
colnames(N_ij) <- rownames(N_ij)
indices <- expand.grid(row = rownames(Y_ij), col = colnames(Y_ij))
# Convert the matrix to a data frame
z_df_complete <- data.frame(
row = as.character(indices$row),
col = as.character(indices$col),
Y = NA
)
for (i in seq_len(nrow(z_df_complete))) {
z_df_complete$Y[i] <- Y_ij[z_df_complete$row[i], z_df_complete$col[i]]
}
for (i in seq_len(nrow(z_df_complete))) {
z_df_complete$degree_pl_row[i] <- sum(Y_ij[z_df_complete$row[i],])/sum(Y_ij[,z_df_complete$row[i]])
}
for (i in seq_len(nrow(z_df_complete))) {
z_df_complete$N[i] <- N_ij[z_df_complete$row[i], z_df_complete$col[i]]
}
z_df_complete$L = (z_df_complete$N -  z_df_complete$Y)
Y_mat = matrix(z_df_complete$Y,ncol=1)
L_mat = matrix(z_df_complete$L,ncol=1)
BT_mat = cbind(Y_mat,L_mat)
player2 = factor(z_df_complete$col, levels = unique(c(z_df_complete$row, z_df_complete$col)))
player1 = factor(z_df_complete$row, levels = unique(c(z_df_complete$row, z_df_complete$col)))
library(BradleyTerry2)
BTM = BTm(outcome = BT_mat,player1 =player1 ,player2 =player2)
abilities = BTabilities(BTM)
bt_rank_df = data.frame(Id = rownames(abilities)[order(abilities[,1])], BTrank = nrow(Y_ij):1)
players_df = players_df %>% inner_join(bt_rank_df, by = 'Id') %>%
mutate(degree_pl = rowSums(Y_ij)/colSums(Y_ij))
}
ggplot(combined_df, aes(x=relative_victories, y=median_rank)) +
# Add points
geom_point(color = "blue", size = 2) +
# Add a red dotted line at 45 degrees passing through the origin
geom_smooth(method = "lm", color = "green", se = FALSE, linetype = "solid", size = 1) +
# Add title and labels
ggtitle("Scatter Plot of Relative Victories vs Median Rank") +
xlab("Relative Victories %") +
ylab("Median ATP Rank") +
scale_x_continuous(labels = scales::percent) +
# Improve the overall appearance
theme_minimal() +
scale_y_reverse()+
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
panel.grid.major = element_line(color = "grey", linetype = "dotted"),
panel.grid.minor = element_blank()
)
combined_df = players_df
est_df<- data.frame(Id = rownames(Y_ij),
marginal_victories = rowSums(Y_ij),
marginal_losses = colSums(Y_ij),
unique_identifier = runif(N, -0.001,0.001))%>%
mutate(unique_identifier = unique_identifier+est_cl)%>%
mutate(relative_victories = marginal_victories/(marginal_losses+marginal_victories))
est_df<- data.frame(Id = rownames(Y_ij),
marginal_victories = rowSums(Y_ij),
marginal_losses = colSums(Y_ij),
unique_identifier = runif(nrow(Y_ij), -0.001,0.001))%>%
mutate(unique_identifier = unique_identifier+est_cl)%>%
mutate(relative_victories = marginal_victories/(marginal_losses+marginal_victories))
est_df<- data.frame(Id = rownames(Y_ij),
marginal_victories = rowSums(Y_ij),
marginal_losses = colSums(Y_ij),
unique_identifier = runif(nrow(Y_ij), -0.001,0.001))
combined_df = players_df %>% inner_join(est_df, by = 'Id')%>% dplyr::arrange(unique_identifier)
ggplot(combined_df, aes(x=relative_victories, y=median_rank)) +
# Add points
geom_point(color = "blue", size = 2) +
# Add a red dotted line at 45 degrees passing through the origin
geom_smooth(method = "lm", color = "green", se = FALSE, linetype = "solid", size = 1) +
# Add title and labels
ggtitle("Scatter Plot of Relative Victories vs Median Rank") +
xlab("Relative Victories %") +
ylab("Median ATP Rank") +
scale_x_continuous(labels = scales::percent) +
# Improve the overall appearance
theme_minimal() +
scale_y_reverse()+
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
panel.grid.major = element_line(color = "grey", linetype = "dotted"),
panel.grid.minor = element_blank()
)
est_df<- data.frame(Id = rownames(Y_ij),
marginal_victories = rowSums(Y_ij),
marginal_losses = colSums(Y_ij),
est_cl = point_est_z,
unique_identifier = runif(N, -0.001,0.001))%>%
mutate(unique_identifier = unique_identifier+est_cl)%>%
est_df=est_df%>%   mutate(relative_victories = marginal_victories/(marginal_losses+marginal_victories))
est_df<- data.frame(Id = rownames(Y_ij),
marginal_victories = rowSums(Y_ij),
marginal_losses = colSums(Y_ij),
est_cl = point_est_z,
unique_identifier = runif(N, -0.001,0.001))%>%
mutate(unique_identifier = unique_identifier+est_cl)%>%
est_df=est_df %>%
mutate(relative_victories = marginal_victories/(marginal_losses+marginal_victories))
est_df=est_df %>%
mutate(relative_victories = marginal_victories/(marginal_losses+marginal_victories))
ggplot(combined_df, aes(x=relative_victories, y=median_rank)) +
# Add points
geom_point(color = "blue", size = 2) +
# Add a red dotted line at 45 degrees passing through the origin
geom_smooth(method = "lm", color = "green", se = FALSE, linetype = "solid", size = 1) +
# Add title and labels
ggtitle("Scatter Plot of Relative Victories vs Median Rank") +
xlab("Relative Victories %") +
ylab("Median ATP Rank") +
scale_x_continuous(labels = scales::percent) +
# Improve the overall appearance
theme_minimal() +
scale_y_reverse()+
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
panel.grid.major = element_line(color = "grey", linetype = "dotted"),
panel.grid.minor = element_blank()
)
combined_df = players_df %>% inner_join(est_df, by = 'Id')%>% dplyr::arrange(unique_identifier)
ggplot(combined_df, aes(x=relative_victories, y=median_rank)) +
# Add points
geom_point(color = "blue", size = 2) +
# Add a red dotted line at 45 degrees passing through the origin
geom_smooth(method = "lm", color = "green", se = FALSE, linetype = "solid", size = 1) +
# Add title and labels
ggtitle("Scatter Plot of Relative Victories vs Median Rank") +
xlab("Relative Victories %") +
ylab("Median ATP Rank") +
scale_x_continuous(labels = scales::percent) +
# Improve the overall appearance
theme_minimal() +
scale_y_reverse()+
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
panel.grid.major = element_line(color = "grey", linetype = "dotted"),
panel.grid.minor = element_blank()
)
combined_df
ggplot(combined_df, aes(x=relative_victories, y=last_rank)) +
# Add points
geom_point(color = "blue", size = 2) +
# Add a red dotted line at 45 degrees passing through the origin
geom_smooth(method = "lm", color = "green", se = FALSE, linetype = "solid", size = 1) +
# Add title and labels
ggtitle("Scatter Plot of Relative Victories vs Median Rank") +
xlab("Relative Victories %") +
ylab("Median ATP Rank") +
scale_x_continuous(labels = scales::percent) +
# Improve the overall appearance
theme_minimal() +
scale_y_reverse()+
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
panel.grid.major = element_line(color = "grey", linetype = "dotted"),
panel.grid.minor = element_blank()
)
source("~/Desktop/Nial/POMM_pairwise/POMMs/Application_launcher_fixed_K.R", echo=TRUE)
