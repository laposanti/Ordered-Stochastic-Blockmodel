}
my_df = data.frame(n=0, K=0,version=0, median=0)
n=100
K=3
Y_ij <- read.table("./Data/Tennis application/Y_ij.csv",header  = F,row.names = 1,sep = ",")
N_ij <- read.table("./Data/Tennis application/N_ij.csv",header  = F,row.names = 1,sep = ",")
Y_ij = as.matrix(Y_ij)
N_ij = as.matrix(N_ij)
n= nrow(N_ij)
diag(N_ij) = 0
z_current = sample(x = c(1:K),size =n,replace = T)
z_prime = z_current
z_prime[1] <- 2
theta = matrix(runif(K**2),K,K)
theta[lower.tri(theta)] = 1 - t(theta)[lower.tri(theta)]
z_P = vec2mat_0_P(z_current, theta)
blocks_victories_vs_players = t(z_P)%*%(Y_ij*upper.tri(Y_ij))
players_victores_vs_blocks = (Y_ij*upper.tri(Y_ij))%*%z_P
ybar = t(z_P)%*%(Y_ij*upper.tri(Y_ij))%*%z_P
# number of missed victories between block p and block q
n_minus_y1 <- (N_ij-Y_ij)*upper.tri(N_ij)
# number of missed victories between block p and block q
mbar<- t(z_P)%*%n_minus_y1%*%z_P
coef1 = lchoose(N_ij, Y_ij)*upper.tri(N_ij)
lamdabar <- t(z_P)%*%(coef1)%*%z_P
naive_version(Y_ij = Y_ij, N_ij = N_ij, z_current = z_current, theta = theta,z_prime = z_prime)
current_version(Y_ij, N_ij = N_ij, z_current = z_current, theta = theta, z_prime = z_prime, item_changed = which(z_current != z_prime),n = length(z_current))
new_version(Y_ij = Y_ij, ybar = ybar,mbar = mbar,lamdabar = lamdabar,n_minus_y1 = n_minus_y1,coef1 = coef1,theta = theta, z_current = z_current,
z_prime = z_prime,K = K,item_changed = 1,k_cur = z_current[1],k_prime = 2)
z_current
z_current = sample(x = c(1:K),size =n,replace = T)
z_prime = z_current
z_current = sample(x = c(1:K),size =n,replace = T)
z_prime = z_current
z_current = sample(x = c(1:K),size =n,replace = T)
z_prime = z_current
z_prime[2] <- 3
theta = matrix(runif(K**2),K,K)
theta[lower.tri(theta)] = 1 - t(theta)[lower.tri(theta)]
z_P = vec2mat_0_P(z_current, theta)
blocks_victories_vs_players = t(z_P)%*%(Y_ij*upper.tri(Y_ij))
players_victores_vs_blocks = (Y_ij*upper.tri(Y_ij))%*%z_P
ybar = t(z_P)%*%(Y_ij*upper.tri(Y_ij))%*%z_P
# number of missed victories between block p and block q
n_minus_y1 <- (N_ij-Y_ij)*upper.tri(N_ij)
# number of missed victories between block p and block q
mbar<- t(z_P)%*%n_minus_y1%*%z_P
coef1 = lchoose(N_ij, Y_ij)*upper.tri(N_ij)
lamdabar <- t(z_P)%*%(coef1)%*%z_P
naive_version(Y_ij = Y_ij, N_ij = N_ij, z_current = z_current, theta = theta,z_prime = z_prime)
current_version(Y_ij, N_ij = N_ij, z_current = z_current, theta = theta, z_prime = z_prime, item_changed = which(z_current != z_prime),n = length(z_current))
new_version(Y_ij = Y_ij, ybar = ybar,mbar = mbar,lamdabar = lamdabar,n_minus_y1 = n_minus_y1,coef1 = coef1,theta = theta, z_current = z_current,
z_prime = z_prime,K = K,item_changed = 2,k_cur = z_current[1],k_prime = 2)
naive_version(Y_ij = Y_ij, N_ij = N_ij, z_current = z_current, theta = theta,z_prime = z_prime)
current_version(Y_ij, N_ij = N_ij, z_current = z_current, theta = theta, z_prime = z_prime, item_changed = which(z_current != z_prime),n = length(z_current))
new_version(Y_ij = Y_ij, ybar = ybar,mbar = mbar,lamdabar = lamdabar,n_minus_y1 = n_minus_y1,coef1 = coef1,theta = theta, z_current = z_current,
z_prime = z_prime,K = K,item_changed = 2,k_cur = z_current[1],k_prime = 3)
z_prime = z_current
z_prime[2] <- 3
theta = matrix(runif(K**2),K,K)
theta[lower.tri(theta)] = 1 - t(theta)[lower.tri(theta)]
z_P = vec2mat_0_P(z_current, theta)
blocks_victories_vs_players = t(z_P)%*%(Y_ij*upper.tri(Y_ij))
players_victores_vs_blocks = (Y_ij*upper.tri(Y_ij))%*%z_P
ybar = t(z_P)%*%(Y_ij*upper.tri(Y_ij))%*%z_P
# number of missed victories between block p and block q
n_minus_y1 <- (N_ij-Y_ij)*upper.tri(N_ij)
# number of missed victories between block p and block q
mbar<- t(z_P)%*%n_minus_y1%*%z_P
coef1 = lchoose(N_ij, Y_ij)*upper.tri(N_ij)
lamdabar <- t(z_P)%*%(coef1)%*%z_P
naive_version(Y_ij = Y_ij, N_ij = N_ij, z_current = z_current, theta = theta,z_prime = z_prime)
current_version(Y_ij, N_ij = N_ij, z_current = z_current, theta = theta, z_prime = z_prime, item_changed = which(z_current != z_prime),n = length(z_current))
new_version(Y_ij = Y_ij, ybar = ybar,mbar = mbar,lamdabar = lamdabar,n_minus_y1 = n_minus_y1,coef1 = coef1,theta = theta, z_current = z_current,
z_prime = z_prime,K = K,item_changed = 2,k_cur = z_current[1],k_prime = 3)
new_version(Y_ij = Y_ij, ybar = ybar,mbar = mbar,lamdabar = lamdabar,n_minus_y1 = n_minus_y1,coef1 = coef1,theta = theta, z_current = z_current,
z_prime = z_prime,K = K,item_changed = 2,k_cur = z_current[2],k_prime = 3)
naive_version(Y_ij = Y_ij, N_ij = N_ij, z_current = z_current, theta = theta,z_prime = z_prime)
current_version(Y_ij, N_ij = N_ij, z_current = z_current, theta = theta, z_prime = z_prime, item_changed = which(z_current != z_prime),n = length(z_current))
new_version(Y_ij = Y_ij, ybar = ybar,mbar = mbar,lamdabar = lamdabar,n_minus_y1 = n_minus_y1,coef1 = coef1,theta = theta, z_current = z_current,
z_prime = z_prime,K = K,item_changed = 2,k_cur = z_current[2],k_prime = 3)
Y_ij <- read.table("./Data/Tennis application/Y_ij.csv",header  = F,row.names = 1,sep = ",")
N_ij <- read.table("./Data/Tennis application/N_ij.csv",header  = F,row.names = 1,sep = ",")
Y_ij = as.matrix(Y_ij)
N_ij = as.matrix(N_ij)
n= nrow(N_ij)
diag(N_ij) = 0
z_current = sample(x = c(1:K),size =n,replace = T)
z_prime = z_current
z_prime[2] <- 3
theta = matrix(runif(K**2),K,K)
theta[lower.tri(theta)] = 1 - t(theta)[lower.tri(theta)]
z_P = vec2mat_0_P(z_current, theta)
blocks_victories_vs_players = t(z_P)%*%(Y_ij*upper.tri(Y_ij))
players_victores_vs_blocks = (Y_ij*upper.tri(Y_ij))%*%z_P
ybar = t(z_P)%*%(Y_ij*upper.tri(Y_ij))%*%z_P
# number of missed victories between block p and block q
n_minus_y1 <- (N_ij-Y_ij)*upper.tri(N_ij)
# number of missed victories between block p and block q
mbar<- t(z_P)%*%n_minus_y1%*%z_P
coef1 = lchoose(N_ij, Y_ij)*upper.tri(N_ij)
lamdabar <- t(z_P)%*%(coef1)%*%z_P
naive_version(Y_ij = Y_ij, N_ij = N_ij, z_current = z_current, theta = theta,z_prime = z_prime)
current_version(Y_ij, N_ij = N_ij, z_current = z_current, theta = theta, z_prime = z_prime, item_changed = which(z_current != z_prime),n = length(z_current))
new_version(Y_ij = Y_ij, ybar = ybar,mbar = mbar,lamdabar = lamdabar,n_minus_y1 = n_minus_y1,coef1 = coef1,theta = theta, z_current = z_current,
z_prime = z_prime,K = K,item_changed = 2,k_cur = z_current[2],k_prime = 3)
Y_ij
lchoose(0,0)
est_model = 'SST'
est_model = 'SST'
# filenames <- list.files(pattern = paste0('True_Model',true_model,'Est_model_', est_model),path = data_wd)
filenames <- list.files(pattern = paste0("Est_model_",est_model),path = data_wd)
print(filenames)
library(ggside)
library(ggrepel)
library(igraph)
library(ggplot2)
library(abind)
library(dplyr)
library(label.switching)
library(collpcm)
library(loo)
library(gt)
library(doParallel)
library(coda)
library(mcclust)
library(LaplacesDemon)
source("/Users/lapo_santi/Desktop/Nial/oldmaterial/POMM_flex/functions_container_flex.R")
source("/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/model_auxiliary_functions/Functions_priorSST.R")
source("/Users/lapo_santi/Desktop/Nial/oldmaterial/project/simplified model/SaraWade.R")
source("/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/model_auxiliary_functions/Inference_orderstats.R")
source("/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/model_auxiliary_functions/MCMC_functions.R")
#FLAG is.simulation=T IF YOU ARE READING THE RESULTS FOR A SIMULATION STUDY
is.simulation = F
if(is.simulation==F){
true_model = "Tennis_data"
if(true_model == "Tennis_data"){
#where the data are stored
setwd('/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/')
Y_ij <- read.table("./Data/Tennis application/Y_ij.csv",header  = F,row.names = 1,sep = ",")
N_ij <- read.table("./Data/Tennis application/N_ij.csv",header  = F,row.names = 1,sep = ",")
Y_ij = as.matrix(Y_ij)
N_ij = as.matrix(N_ij)
data_wd<- "/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/results/application/Tennis_data/"
#where the data are saved
processed_wd <- "/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/results/application/Tennis_data/processed/"
df_rank <- readRDS("/Users/lapo_santi/Desktop/Nial/weekly material/Tennis application/data/df_rank.RData")
ranks= df_rank   %>%
filter(week_year==2017)
df_match <- readRDS("/Users/lapo_santi/Desktop/Nial/weekly material/Tennis application/data/df_match.RData")
ranks= df_rank   %>%
filter(week_year==2017)  %>% group_by(player_slug) %>% summarise(median_rank = median(rank_number),
max_r = max(rank_number),
min_r = min(rank_number))
top100players = ranks %>% filter(median_rank <= 100) %>% arrange(median_rank)
players_df = data.frame(Id = rownames(Y_ij)) %>% inner_join(top100players,by= c('Id'='player_slug'))
#now, for each game I want to filter just those players in the top one-hundred
colnames(Y_ij) <- rownames(Y_ij)
rownames(N_ij) <- rownames(Y_ij)
colnames(N_ij) <- rownames(N_ij)
indices <- expand.grid(row = rownames(Y_ij), col = colnames(Y_ij))
# Convert the matrix to a data frame
z_df_complete <- data.frame(
row = as.character(indices$row),
col = as.character(indices$col),
Y = NA
)
for (i in seq_len(nrow(z_df_complete))) {
z_df_complete$Y[i] <- Y_ij[z_df_complete$row[i], z_df_complete$col[i]]
}
for (i in seq_len(nrow(z_df_complete))) {
z_df_complete$degree_pl_row[i] <- sum(Y_ij[z_df_complete$row[i],])/sum(Y_ij[,z_df_complete$row[i]])
}
for (i in seq_len(nrow(z_df_complete))) {
z_df_complete$N[i] <- N_ij[z_df_complete$row[i], z_df_complete$col[i]]
}
z_df_complete$L = (z_df_complete$N -  z_df_complete$Y)
Y_mat = matrix(z_df_complete$Y,ncol=1)
L_mat = matrix(z_df_complete$L,ncol=1)
BT_mat = cbind(Y_mat,L_mat)
player2 = factor(z_df_complete$col, levels = unique(c(z_df_complete$row, z_df_complete$col)))
player1 = factor(z_df_complete$row, levels = unique(c(z_df_complete$row, z_df_complete$col)))
library(BradleyTerry2)
BTM = BTm(outcome = BT_mat,player1 =player1 ,player2 =player2)
abilities = BTabilities(BTM)
bt_rank_df = data.frame(Id = rownames(abilities)[order(abilities[,1])], BTrank = 95:1)
players_df = players_df %>% inner_join(bt_rank_df, by = 'Id') %>%
mutate(degree_pl = rowSums(Y_ij)/colSums(Y_ij))
comparison = plot(players_df$median_rank,players_df$BTrank)
}else if( true_model == 'Citation_data'){
data_wd<- "/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/results/application/Citation_data/"
#where the data are saved
processed_wd <- "/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/results/application/Citation_data/processed/"
scores=  read.csv("/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/Data/Citations_application/journal-scores.csv")
# Creating the data frame
journal_data <- data.frame(
Rank = 1:47,
Journal = c("JRSS-B", "AoS", "Bka", "JASA", "Bcs", "JRSS-A", "Bern", "SJS", "Biost", "JCGS",
"Tech", "AmS", "JTSA", "ISR", "AISM", "CJS", "StSin", "StSci", "LDA", "JRSS-C",
"StMed", "ANZS", "StCmp", "StataJ", "SPL", "StNee", "Envr", "JABES", "Mtka",
"StMod", "JSPI", "SMMR", "BioJ", "JMA", "EES", "CSDA", "JNS", "CmpSt", "Stats",
"Test", "CSTM", "JSS", "JBS", "JSCS", "CSSC", "StPap", "JAS"),
SM = c(2.09, 1.38, 1.29, 1.26, 0.85, 0.70, 0.69, 0.66, 0.66, 0.64, 0.53, 0.40, 0.37, 0.33,
0.32, 0.30, 0.29, 0.11, 0.10, 0.09, 0.06, 0.06, 0.04, 0.02, -0.09, -0.10, -0.11,
-0.16, -0.18, -0.22, -0.33, -0.35, -0.40, -0.45, -0.48, -0.52, -0.53, -0.64, -0.65,
-0.70, -0.74, -0.80, -0.83, -0.92, -1.26, -1.35, -1.41),
QSE = c(0.11, 0.07, 0.08, 0.06, 0.07, 0.19, 0.15, 0.12, 0.11, 0.12, 0.15, 0.18, 0.20, 0.25,
0.16, 0.14, 0.09, 0.11, 0.17, 0.15, 0.07, 0.21, 0.15, 0.33, 0.09, 0.25, 0.18, 0.23,
0.17, 0.21, 0.07, 0.16, 0.12, 0.08, 0.25, 0.07, 0.15, 0.22, 0.18, 0.15, 0.10, 0.19,
0.16, 0.15, 0.14, 0.20, 0.15),
SMgrouped = c(1.87, 1.17, 1.11, 1.11, 0.65, 0.31, 0.31, 0.31, 0.31, 0.31, 0.31, 0.04, 0.04,
0.04, 0.04, 0.04, 0.04, -0.04, -0.04, -0.04, -0.04, -0.04, -0.04, -0.04, -0.04,
-0.04, -0.04, -0.04, -0.04, -0.04, -0.31, -0.31, -0.31, -0.36, -0.36, -0.36,
-0.36, -0.36, -0.36, -0.36, -0.36, -0.36, -0.36,
-0.36, -0.88, -0.88, -0.88)
)
# Displaying the data frame
print(journal_data)
Y_ij=read.csv("/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/Data/Citations_application/cross-citation-matrix.csv",header = T,row.names = 1)
diag(Y_ij) = 0
N_ij= matrix(0,47,47) +Y_ij*upper.tri(Y_ij)+
t(Y_ij)*upper.tri(Y_ij)+Y_ij*lower.tri(Y_ij)+t(Y_ij)*lower.tri(Y_ij)
rownames(Y_ij) %in% scores[,1]
# Define the mapping between the acronyms in Y_ij and scores
acronym_mapping <- c("AmS" = "AmerStatist", "AISM" = "AnnInstStatMath", "AoS" = "AnnStat", "ANZS" = "ANZJStat",
"Bern" = "Bernoulli", "BioJ" = "BiometJ", "Bcs" = "Biometrics", "Bka" = "Biometrika",
"Biost" = "Biostatistics", "CJS" = "CanJStat", "CSSC" = "CommStatTM", "CSTM" = "CommStatTM",
"CmpSt" = "ComputatStat", "CSDA" = "CSDA", "EES" = "Econometrica", "Envr" = "Environmetrics",
"ISR" = "ISR", "JABES" = "JABES", "JASA" = "JASA", "JAS" = "JAP", "JBS" = "JbiopharmStat",
"JCGS" = "JCGS", "JMA" = "JMVA", "JNS" = "JRSSA", "JRSS-A" = "JRSSA", "JRSS-B" = "JRSSB",
"JRSS-C" = "JRSSC", "JSCS" = "JSCS", "JSPI" = "JSPI", "JSS" = "JStatSoft", "JTSA" = "JTSA",
"LDA" = "LDA", "Mtka" = "MCAP", "SJS" = "SJS", "StataJ" = "StatComput", "StCmp" = "StatMed",
"Stats" = "Statistics", "StMed" = "StatMed", "SMMR" = "SMMR", "StMod" = "StatMod", "StNee" = "StatNeerlandica",
"StPap" = "StatProbLett", "SPL" = "SPA", "StSci" = "StatSci", "StSin" = "StatSinica", "Tech" = "Technometrics",
"Test" = "TPA")
# Use mapvalues function to replace the entries
scores$shortName <- plyr::mapvalues(scores$shortName, from = acronym_mapping, to = names(acronym_mapping))
players_df = data.frame(Id = journal_data$Journal, points= journal_data$SM, median_rank = journal_data$Rank)
#now, for each game I want to filter just those players in the top one-hundred
colnames(Y_ij) <- rownames(Y_ij)
rownames(N_ij) <- rownames(Y_ij)
colnames(N_ij) <- rownames(N_ij)
indices <- expand.grid(row = rownames(Y_ij), col = colnames(Y_ij))
# Convert the matrix to a data frame
z_df_complete <- data.frame(
row = as.character(indices$row),
col = as.character(indices$col),
Y = NA
)
for (i in seq_len(nrow(z_df_complete))) {
z_df_complete$Y[i] <- Y_ij[z_df_complete$row[i], z_df_complete$col[i]]
}
for (i in seq_len(nrow(z_df_complete))) {
z_df_complete$degree_pl_row[i] <- sum(Y_ij[z_df_complete$row[i],])/sum(Y_ij[,z_df_complete$row[i]])
}
for (i in seq_len(nrow(z_df_complete))) {
z_df_complete$N[i] <- N_ij[z_df_complete$row[i], z_df_complete$col[i]]
}
z_df_complete$L = (z_df_complete$N -  z_df_complete$Y)
Y_mat = matrix(z_df_complete$Y,ncol=1)
L_mat = matrix(z_df_complete$L,ncol=1)
BT_mat = cbind(Y_mat,L_mat)
player2 = factor(z_df_complete$col, levels = unique(c(z_df_complete$row, z_df_complete$col)))
player1 = factor(z_df_complete$row, levels = unique(c(z_df_complete$row, z_df_complete$col)))
library(BradleyTerry2)
BTM = BTm(outcome = BT_mat,player1 =player1 ,player2 =player2)
abilities = BTabilities(BTM)
bt_rank_df = data.frame(Id = rownames(abilities)[order(abilities[,1])], BTrank = nrow(Y_ij):1)
players_df = players_df %>% inner_join(bt_rank_df, by = 'Id') %>%
mutate(degree_pl = rowSums(Y_ij)/colSums(Y_ij))
comparison = plot(players_df$median_rank,players_df$BTrank)
}
}else if(is.simulation == T){
true_model = "Simple"
data_wd = "/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/results/simulation/simulation/Simple_true//"
processed_wd <- "/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/results/simulation/simulation/Simple_true/processed/"
}
uploaded_results<- readRDS(paste0(data_wd,"/",filenames[file]))
est_model = 'SST'
# filenames <- list.files(pattern = paste0('True_Model',true_model,'Est_model_', est_model),path = data_wd)
filenames <- list.files(pattern = paste0("Est_model_",est_model),path = data_wd)
print(filenames)
file=2
uploaded_results<- readRDS(paste0(data_wd,"/",filenames[file]))
print(paste0('Now estimating ', filenames[file]))
print(paste0(length(filenames)-file+1,' within the same class left '))
N= nrow(uploaded_results$chain1$Y_ij)
n=N
N_iter = dim(uploaded_results$chain1$est_containers$z)[[2]]
K = dim(uploaded_results$chain1$est_containers$theta)[[1]]
burnin = max(N_iter - 40000,1)
Y_ij <- uploaded_results$chain1$Y_ij
N_ij <- uploaded_results$chain1$N_ij
#-------------------------------------------------------------------------------
# P temporary estimate
#-------------------------------------------------------------------------------
P_burned = uploaded_results$chain1$est_containers$theta[,,-c(1:burnin)]
burnin
burnin
burnin
#-------------------------------------------------------------------------------
# P temporary estimate
#-------------------------------------------------------------------------------
P_burned = uploaded_results$chain1$est_containers$theta[,,-c(1:burnin)]
z_burned =  uploaded_results$chain1$est_containers$z[,-c(1:burnin)]
if(est_model != 'Simple'){
m_vec_burned = uploaded_results$chain1$est_containers$mu_vec[,-c(1:burnin)]
}
if(est_model == 'WST'){
sigma_squared_burned = uploaded_results$chain1$est_containers$sigma_squared[-c(1:burnin)]
}
theta = apply(P_burned, c(1,2), mean)
P_est = inverse_logit_f(theta)
my_z_est<- z_plot(z_burned = z_burned,  A = uploaded_results$chain1$control_containers$A[-c(1:burnin)],Y_ij = Y_ij, N_ij = N_ij, true_model= true_model,P_est = P_est,
est_model = est_model, true_value =is.simulation,
diag0.5 =diag0.5 , K=K, N=nrow(uploaded_results$chain1$Y_ij), z_true = uploaded_results$chain1$ground_truth$z ,
burnin =  burnin ,label_switch = T,tap= processed_wd)
point_est_z<- as.vector(my_z_est$point_est)
plot_name <- paste0(processed_wd,"//RankvsClust_Est_model",est_model, "_K",K,"_N",nrow(uploaded_results$chain1$Y_ij),".png")
est_df<- data.frame(Id = rownames(Y_ij), est_cl = point_est_z)
combined_df = players_df %>% inner_join(est_df, by = 'Id')%>% dplyr::arrange(median_rank)
plot_df = z_df_complete%>%
inner_join(est_df, by = c("col" = "Id")) %>%
inner_join(est_df, by = c("row" = "Id")) %>%
mutate(col = factor(col, levels = unique(col[order(est_cl.x, col)])),
row = factor(row, levels = unique(row[order(est_cl.y , row, decreasing = TRUE)])))%>%
mutate(perc_success = Y/N)
est_df_disordered = est_df %>% mutate(est_cl = sample(1:5, 47,T))
plot_df_disordered = z_df_complete%>%
inner_join(est_df_disordered, by = c("col" = "Id")) %>%
inner_join(est_df_disordered, by = c("row" = "Id")) %>%
mutate(perc_success = Y/N) %>%
mutate(col = factor(col, levels = unique(col[order(est_cl.x, col)])),
row = factor(row, levels = unique(row[order(est_cl.y , row, decreasing = TRUE)])))
est_df_disordered = est_df %>% mutate(est_cl = sample(1:5, nrow(Y_ij),T))
plot_df_disordered = z_df_complete%>%
inner_join(est_df_disordered, by = c("col" = "Id")) %>%
inner_join(est_df_disordered, by = c("row" = "Id")) %>%
mutate(perc_success = Y/N) %>%
mutate(col = factor(col, levels = unique(col[order(est_cl.x, col)])),
row = factor(row, levels = unique(row[order(est_cl.y , row, decreasing = TRUE)])))
plot_df = z_df_complete%>%
inner_join(est_df, by = c("col" = "Id")) %>%
inner_join(est_df, by = c("row" = "Id")) %>%
mutate(col = factor(col, levels = unique(col[order(est_cl.x, col)])),
row = factor(row, levels = unique(row[order(est_cl.y , row, decreasing = TRUE)])))%>%
mutate(perc_success = Y/N)
adjacency_m   <- ggplot(plot_df, aes(x = col, y = row)) +
geom_tile(aes(fill = perc_success), color = "gray", show.legend = T) +
scale_fill_gradient(low = "white", high = "red") +
geom_ysidecol(aes(x = degree_pl_row, color=factor(est_cl.y))) +
labs(title = 'Heatmap filled with victory percentages',
x = paste0("Players ordered by blocks"),
y = paste0("Playersordered by blocks"),
fill = "% victories",
color = "Block")+
theme(legend.position = 'bottom', legend.direction = 'horizontal')+
theme_minimal()+
theme(axis.text.y = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
adjacency_m
adjacency_m_disordered<- ggplot(plot_df_disordered, aes(x = col, y = row)) +
geom_tile(aes(fill = perc_success), color = "gray", show.legend = T) +
scale_fill_gradient(low = "white", high = "red") +
geom_ysidecol(aes(x = degree_pl_row, color=factor(est_cl.y))) +
labs(title = 'Heatmap filled with percetage citation received over citations made',
x = paste0("Players ordered by blocks"),
y = paste0("Playersordered by blocks"),
fill = "% relative citations",
color = "Block")+
theme(legend.position = 'bottom', legend.direction = 'horizontal')+
theme_minimal() +
theme(axis.text.y = element_text(angle=30),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
adjacency_m_disordered
adjacency_m   <- ggplot(plot_df, aes(x = col, y = row)) +
geom_tile(aes(fill = perc_success), color = "gray", show.legend = T) +
scale_fill_gradient(low = "white", high = "red") +
geom_ysidecol(aes(x = degree_pl_row, color=factor(est_cl.y))) +
labs(title = 'Heatmap filled with victory percentages',
x = paste0("Players ordered by blocks"),
y = paste0("Playersordered by blocks"),
fill = "% victories",
color = "Block")+
theme(legend.position = 'bottom', legend.direction = 'horizontal')+
theme_minimal()+
theme(axis.text.y = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
adjacency_m_disordered<- ggplot(plot_df_disordered, aes(x = col, y = row)) +
geom_tile(aes(fill = perc_success), color = "gray", show.legend = T) +
scale_fill_gradient(low = "white", high = "red") +
geom_ysidecol(aes(x = degree_pl_row, color=factor(est_cl.y))) +
labs(title = 'Heatmap filled with percetage citation received over citations made',
x = paste0("Players ordered by blocks"),
y = paste0("Playersordered by blocks"),
fill = "% relative citations",
color = "Block")+
theme(legend.position = 'bottom', legend.direction = 'horizontal')+
theme_minimal() +
theme(axis.text.y = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
adjacency_m_disordered
adjacency_m_disordered<- ggplot(plot_df_disordered, aes(x = col, y = row)) +
geom_tile(aes(fill = perc_success), color = "gray", show.legend = T) +
scale_fill_gradient(low = "white", high = "red") +
geom_ysidecol(aes(x = degree_pl_row, color=factor(est_cl.y))) +
labs(title = 'Heatmap filled with games won over games lost',
x = paste0("Players ordered by blocks"),
y = paste0("Playersordered by blocks"),
fill = "% wins",
color = "Block")+
theme(legend.position = 'bottom', legend.direction = 'horizontal')+
theme_minimal() +
theme(axis.text.y = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
if(true_model == 'Tennis_data'){
adjacency_m   <- ggplot(plot_df, aes(x = col, y = row)) +
geom_tile(aes(fill = perc_success), color = "gray", show.legend = T) +
scale_fill_gradient(low = "white", high = "red") +
geom_ysidecol(aes(x = degree_pl_row, color=factor(est_cl.y))) +
labs(title = 'Heatmap filled with victory percentages',
x = paste0("Players ordered by blocks"),
y = paste0("Playersordered by blocks"),
fill = "% victories",
color = "Block")+
theme(legend.position = 'bottom', legend.direction = 'horizontal')+
theme_minimal()+
theme(axis.text.y = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
}else if(true_model == 'Citation_data'){
adjacency_m<- ggplot(plot_df, aes(x = col, y = row)) +
geom_tile(aes(fill = perc_success), color = "gray", show.legend = T) +
scale_fill_gradient(low = "white", high = "red") +
geom_ysidecol(aes(x = degree_pl_row, color=factor(est_cl.y))) +
labs(title = 'Heatmap filled with percetage citation received over citations made',
x = paste0("Players ordered by blocks"),
y = paste0("Playersordered by blocks"),
fill = "% relative citations",
color = "Block")+
theme(legend.position = 'bottom', legend.direction = 'horizontal')+
theme_minimal() +
theme(axis.text.y = element_text(angle=30),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
adjacency_m_disordered<- ggplot(plot_df_disordered, aes(x = col, y = row)) +
geom_tile(aes(fill = perc_success), color = "gray", show.legend = T) +
scale_fill_gradient(low = "white", high = "red") +
geom_ysidecol(aes(x = degree_pl_row, color=factor(est_cl.y))) +
labs(title = 'Heatmap filled with games won over games lost',
x = paste0("Players ordered by blocks"),
y = paste0("Playersordered by blocks"),
fill = "% wins",
color = "Block")+
theme(legend.position = 'bottom', legend.direction = 'horizontal')+
theme_minimal() +
theme(axis.text.y = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
}
adjacency_m_disordered
est_df_disordered = est_df %>% mutate(est_cl = sample(1:4, nrow(Y_ij),T))
plot_df_disordered = z_df_complete%>%
inner_join(est_df_disordered, by = c("col" = "Id")) %>%
inner_join(est_df_disordered, by = c("row" = "Id")) %>%
mutate(perc_success = Y/N) %>%
mutate(col = factor(col, levels = unique(col[order(est_cl.x, col)])),
row = factor(row, levels = unique(row[order(est_cl.y , row, decreasing = TRUE)])))
adjacency_m_disordered<- ggplot(plot_df_disordered, aes(x = col, y = row)) +
geom_tile(aes(fill = perc_success), color = "gray", show.legend = T) +
scale_fill_gradient(low = "white", high = "red") +
labs(title = 'Heatmap filled with games won over games lost',
x = paste0("Players ordered by blocks"),
y = paste0("Playersordered by blocks"),
fill = "% wins",
color = "Block")+
theme(legend.position = 'bottom', legend.direction = 'horizontal')+
theme_minimal() +
theme(axis.text.y = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
adjacency_m_disordered
adjacency_m   <- ggplot(plot_df, aes(x = col, y = row)) +
geom_tile(aes(fill = perc_success), color = "gray", show.legend = T) +
scale_fill_gradient(low = "white", high = "red") +
geom_ysidecol(aes(x = degree_pl_row, color=factor(est_cl.y))) +
labs(title = 'Heatmap filled with games won over games lost',
x = paste0("Players ordered by blocks"),
y = paste0("Playersordered by blocks"),
fill = "% victories",
color = "Block")+
theme(legend.position = 'bottom', legend.direction = 'horizontal')+
theme_minimal()+
theme(axis.text.y = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
adjacency_m
