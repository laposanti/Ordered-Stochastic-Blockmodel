noy = (1-Y)
diag(noy) = 0
noybar <- t(z_P)%*%noy%*%z_P
llik_over_blocks_f = function(ybar, nbar, P){
llik<- sum(ybar*log(P)+(nbar - ybar)*log(1-P))
return(llik)
}
# Binomial SBM
Y_binom <- matrix(0, n,n)
for(i in 1:n){
for(j in 1:n){
Y_binom[i,j]<- rbinom(1,N[i,j],P_nbyn[i,j])
}
}
Y_binom[lower.tri(Y_binom)] = N[lower.tri(N)] - t(Y_binom)[lower.tri(Y_binom)]
diag(Y_binom)<- 0
Y_binom
vittorie_pq <- t(z_P)%*%(Y_binom*upper.tri(Y_binom))%*%z_P
sconfitte_qp <- t(z_P)%*%(Y_binom*upper.tri(Y_binom))%*%z_P
ngiocate <- t(z_P)%*%(N*upper.tri(Y_binom))%*%z_P
sconfitte_pq<- t(z_P)%*%((N-Y_binom)*upper.tri(Y_binom))%*%z_P
ngiocate == vittorie_pq + sconfitte_pq
coef1 = lchoose(N,Y_binom)
bin_coef1 <- t(z_P)%*%(coef1)%*%z_P
coef2 = lchoose(N,t(Y_binom))
bin_coef2 <- t(z_P)%*%(coef2)%*%z_P
llik_over_blocks_f_binomial2 = function(P, vittorie_pq,sconfitte_pq,ngiocate,sconfitte_qp){
P_mat_diag = diag(bin_coef1) +  diag((vittorie_pq))*log(diag(P))+diag(sconfitte_pq)*log(diag(1-P))
p_mat <- bin_coef1+ t(bin_coef1) + (vittorie_pq )*log(P)+sconfitte_pq*log(1-P)+(ngiocate - vittorie_pq)*log(1-P)+vittorie_pq*log(P)
llik<- sum(p_mat[upper.tri(p_mat, diag = F)]) + sum(P_mat_diag)
return(llik)
}
llik_over_blocks_f_binomial2(P, vittorie_pq,sconfitte_pq,ngiocate,sconfitte_qp)
log_lik_f_binom = function(N,Y,z,P, directed=T){
z_P<- vec2mat_0_P(z,P)
P_nbyn<- calculate_victory_probabilities(z_P, P)
if(directed==T){
#computing the pairwise log-probabilitiees
bigM = lchoose(N,Y)+(Y* log(P_nbyn)+(N-Y)*log(1 - P_nbyn))
#remember to subtract the diagonal
log_lik= sum(bigM) - sum(diag(bigM))
}else if(directed==F){
bigM = lchoose(N,Y)+(Y* log(P_nbyn)+(N-Y)*log(1 - P_nbyn))
#remember to subtract the diagonal
log_lik= sum(bigM*upper.tri(bigM))
}
return(log_lik)
}
log_lik_f_binom(N,Y_binom,z,P,directed=F)
log_lik_f_binom = function(N,Y,z,P, directed=T){
z_P<- vec2mat_0_P(z,P)
P_nbyn<- calculate_victory_probabilities(z_P, P)
if(directed==T){
#computing the pairwise log-probabilitiees
bigM = lchoose(N,Y)+(Y* log(P_nbyn)+(N-Y)*log(1 - P_nbyn))
#remember to subtract the diagonal
log_lik= sum(bigM) - sum(diag(bigM))
}else if(directed==F){
bigM = lchoose(N,Y)+(Y* log(P_nbyn)+(N-Y)*log(1 - P_nbyn))
#remember to subtract the diagonal
log_lik= sum(bigM*upper.tri(bigM))
}
return(log_lik)
}
#ranging over all possible combinations of the P matrix
llik_over_blocks_f_binomial = function(bin_coef, ybar, mbar, P){
llik<- sum(bin_coef+ ybar*log(P) + (mbar)*log(1-P))
return(llik)
}
llik_over_blocks_f_binomial(bin_coef1 ,ybar_binom1, mbar_binom1,P)
#
llik_over_blocks_f_binomial1 = function(bin_coef1, ybar, mbar, P){
diag_p_mat = diag(bin_coef1) + diag(ybar)*log(diag(P)) + diag(mbar)*log(diag(1-P))
p_mat <- bin_coef1 + t(bin_coef1) - diag(diag(bin_coef1),nrow(P),ncol(P)) + 2*ybar*log(P) + 2*(mbar)*log(1-P)
llik<- sum(p_mat[upper.tri(p_mat, diag = F)]) +sum(diag_p_mat)
return(llik)
}
# number of victories between block p and block q
ybar_binom1 = t(z_P)%*%(Y_binom*upper.tri(Y_binom))%*%z_P
# number of missed victories between block p and block q
n_minus_y1 <- (N-Y_binom)*upper.tri(N)
# number of missed victories between block p and block q
mbar_binom1<- t(z_P)%*%n_minus_y1%*%z_P
coef1 = lchoose(N, Y_binom)*upper.tri(N)
bin_coef1 <- t(z_P)%*%(coef1)%*%z_P
llik_over_blocks_f_binomial1(bin_coef1 ,ybar_binom1, mbar_binom1,P)
# number of missed victories between block q and block p
ybar_binom2 = t(z_P)%*%(t(Y_binom)*upper.tri(Y_binom))%*%z_P
n_minus_y2 <- (N-t(Y_binom))*upper.tri(N)
# number of victories between block q and block p
mbar_binom2<- t(z_P)%*%n_minus_y2%*%z_P
coef2 = lchoose(N, t(Y_binom))*upper.tri(N)
bin_coef1 <- t(z_P)%*%(coef1)%*%z_P
bin_coef2 <- t(z_P)%*%(coef2)%*%z_P
#bin_coef2 <- t(z_P)%*%t(coef2)%*%z_P
log_lik1 = log_lik_f_binom(N,Y_binom,z,P,directed=F)
llik_over_blocks_f_binomial2 = function(bin_coef1,bin_coef2, ybar_binom1, mbar_binom1,ybar_binom2, mbar_binom2, P){
# p_diag = diag(bin_coef1) + diag(ybar_binom1)*diag(log(P)) + diag(mbar_binom1)*log(diag(1-P))
p_upper_tri_mat <- bin_coef1  + (ybar_binom1)*log(P) + (mbar_binom1)*log(1-P)
p_lower_tri_mat<- bin_coef2  + (ybar_binom2)*log(P) + (mbar_binom2)*log(1-P)
llik<- sum(p_upper_tri_mat[upper.tri(p_upper_tri_mat, diag =T)]) + sum(p_lower_tri_mat[upper.tri(p_lower_tri_mat, diag =F)])
return(llik)
}
llik_over_blocks_f_binomial2(bin_coef1,bin_coef2, ybar_binom1, mbar_binom1,ybar_binom2, mbar_binom2, P)
log_lik1
llik_over_blocks_f_binomial2 = function(bin_coef1,bin_coef2, ybar_binom1, mbar_binom1,ybar_binom2, mbar_binom2, P){
# p_diag = diag(bin_coef1) + diag(ybar_binom1)*diag(log(P)) + diag(mbar_binom1)*log(diag(1-P))
p_upper_tri_mat <- bin_coef1  + (ybar_binom1)*log(P) + (mbar_binom1)*log(1-P)
p_lower_tri_mat<- bin_coef2  + (ybar_binom2)*log(P) + (mbar_binom2)*log(1-P)
llik<- sum(p_upper_tri_mat[upper.tri(p_upper_tri_mat, diag =T)]) + sum(p_lower_tri_mat[lower.tri(p_lower_tri_mat, diag =F)])
return(llik)
}
llik_over_blocks_f_binomial2(bin_coef1,bin_coef2, ybar_binom1, mbar_binom1,ybar_binom2, mbar_binom2, P)
log_lik1
llik_over_blocks_f_binomial2 = function(bin_coef1,bin_coef2, ybar_binom1, mbar_binom1,ybar_binom2, mbar_binom2, P){
# p_diag = diag(bin_coef1) + diag(ybar_binom1)*diag(log(P)) + diag(mbar_binom1)*log(diag(1-P))
p_upper_tri_mat <- bin_coef1  + (ybar_binom1)*log(P) + (mbar_binom1)*log(1-P)
p_lower_tri_mat<- bin_coef2  + (mbar_binom2)*log(P) + (ybar_binom2)*log(1-P)
llik<- sum(p_upper_tri_mat[upper.tri(p_upper_tri_mat, diag =T)]) + sum(p_lower_tri_mat[lower.tri(p_lower_tri_mat, diag =F)])
return(llik)
}
llik_over_blocks_f_binomial2(bin_coef1,bin_coef2, ybar_binom1, mbar_binom1,ybar_binom2, mbar_binom2, P)
log_lik1
llik_over_blocks_f_binomial2 = function(bin_coef1,bin_coef2, ybar_binom1, mbar_binom1,ybar_binom2, mbar_binom2, P){
# p_diag = diag(bin_coef1) + diag(ybar_binom1)*diag(log(P)) + diag(mbar_binom1)*log(diag(1-P))
p_upper_tri_mat <- bin_coef1  + (ybar_binom1)*log(P) + (mbar_binom1)*log(1-P)
p_lower_tri_mat<- bin_coef2  + (mbar_binom2)*log(P) + (ybar_binom2)*log(1-P)
llik<- sum(p_upper_tri_mat[upper.tri(p_upper_tri_mat, diag =T)]) + sum(p_lower_tri_mat[lower.tri(p_lower_tri_mat, diag =F)])
return(llik)
}
llik_over_blocks_f_binomial2(bin_coef1,bin_coef2, ybar_binom1, mbar_binom1,ybar_binom2, mbar_binom2, P)
log_lik1
llik_over_blocks_f_binomial2 = function(bin_coef1,bin_coef2, ybar_binom1, mbar_binom1,ybar_binom2, mbar_binom2, P){
# p_diag = diag(bin_coef1) + diag(ybar_binom1)*diag(log(P)) + diag(mbar_binom1)*log(diag(1-P))
p_upper_tri_mat <- bin_coef1  + (ybar_binom1)*log(P) + (mbar_binom1)*log(1-P)
p_lower_tri_mat<- bin_coef2  + t(mbar_binom2)*log(P) + t(ybar_binom2)*log(1-P)
llik<- sum(p_upper_tri_mat[upper.tri(p_upper_tri_mat, diag =T)]) + sum(p_lower_tri_mat[upper.tri(p_lower_tri_mat, diag =F)])
return(llik)
}
llik_over_blocks_f_binomial2(bin_coef1,bin_coef2, ybar_binom1, mbar_binom1,ybar_binom2, mbar_binom2, P)
log_lik1
llik_over_blocks_f_binomial2 = function(bin_coef1,bin_coef2, ybar_binom1, mbar_binom1,ybar_binom2, mbar_binom2, P){
# p_diag = diag(bin_coef1) + diag(ybar_binom1)*diag(log(P)) + diag(mbar_binom1)*log(diag(1-P))
p_upper_tri_mat <- bin_coef1  + (ybar_binom1)*log(P) + (mbar_binom1)*log(1-P)
p_lower_tri_mat<- t(bin_coef2)  + t(mbar_binom2*log(P)) + t(ybar_binom2*log(1-P))
llik<- sum(p_upper_tri_mat[upper.tri(p_upper_tri_mat, diag =T)]) + sum(p_lower_tri_mat[upper.tri(p_lower_tri_mat, diag =F)])
return(llik)
}
llik_over_blocks_f_binomial2(bin_coef1,bin_coef2, ybar_binom1, mbar_binom1,ybar_binom2, mbar_binom2, P)
log_lik1
llik_over_blocks_f_binomial = function(bin_coef, ybar, mbar, P){
#llik<- sum(bin_coef+ ybar*log(P) + (mbar)*log(1-P))
llik = matrix(0,K,K)
for(p in 1:K){
for(q in 1:K){
if(q-p==0){
llik[p,q] = bin_coef+ ybar[p,q]*log(P[p,q]) + mbar[p,q]*log(1-P[p,q])
}else{
llik[p,q] = bin_coef+ ybar[p,q]*log(P[p,q]) + mbar[p,q]*log(1-P[p,q])
llik[q,p] = bin_coef+ mbar[q,p]*log(P[p,q]) + ybar[q,p]*log(1-P[p,q])
}
}
}
return(llik)
}
llik_over_blocks_f_binomial(bin_coef1 ,ybar_binom1, mbar_binom1,P)
llik_over_blocks_f_binomial = function(bin_coef, ybar, mbar, P){
#llik<- sum(bin_coef+ ybar*log(P) + (mbar)*log(1-P))
llik = matrix(0,K,K)
for(p in 1:K){
for(q in 1:K){
if(q-p==0){
llik[p,q] = bin_coef+ ybar[p,q]*log(P[p,q]) + mbar[p,q]*log(1-P[p,q])
}else{
llik[p,q] = bin_coef[p,q]+ ybar[p,q]*log(P[p,q]) + mbar[p,q]*log(1-P[p,q])
llik[q,p] = bin_coef[q,p]+ mbar[q,p]*log(P[p,q]) + ybar[q,p]*log(1-P[p,q])
}
}
}
return(sum(llik))
}
llik_over_blocks_f_binomial(bin_coef1 ,ybar_binom1, mbar_binom1,P)
llik_over_blocks_f_binomial = function(bin_coef, ybar, mbar, P){
#llik<- sum(bin_coef+ ybar*log(P) + (mbar)*log(1-P))
llik = matrix(0,K,K)
for(p in 1:K){
for(q in 1:K){
if(q-p==0){
llik[p,q] = bin_coef[p,q]+ ybar[p,q]*log(P[p,q]) + mbar[p,q]*log(1-P[p,q])
}else{
llik[p,q] = bin_coef[p,q]+ ybar[p,q]*log(P[p,q]) + mbar[p,q]*log(1-P[p,q])
llik[q,p] = bin_coef[q,p]+ mbar[q,p]*log(P[p,q]) + ybar[q,p]*log(1-P[p,q])
}
}
}
return(sum(llik))
}
llik_over_blocks_f_binomial(bin_coef1 ,ybar_binom1, mbar_binom1,P)
log_lik1
llik_over_blocks_f_binomial1 = function(bin_coef, ybar, mbar, P){
#llik<- sum(bin_coef+ ybar*log(P) + (mbar)*log(1-P))
llik = matrix(0,K,K)
for(p in 1:K){
for(q in 1:K){
if(q-p==0){
llik[p,q] = bin_coef[p,q]+ ybar[p,q]*log(P[p,q]) + mbar[p,q]*log(1-P[p,q])
}else{
llik[p,q] = bin_coef[p,q]+bin_coef[q,p]+ (ybar[p,q]+mbar[q,p])*log(P[p,q]) + (mbar[p,q]+ybar[q,p])*log(1-P[p,q])
}
}
}
return(sum(llik))
}
llik_over_blocks_f_binomial1(bin_coef1 ,ybar_binom1, mbar_binom1,P)
llik_over_blocks_f_binomial1 = function(bin_coef, ybar, mbar, P){
#llik<- sum(bin_coef+ ybar*log(P) + (mbar)*log(1-P))
llik = matrix(0,K,K)
for(p in 1:K){
for(q in 1:K){
if(q-p==0){
llik[p,q] = bin_coef[p,q]+ ybar[p,q]*log(P[p,q]) + mbar[p,q]*log(1-P[p,q])
}else{
llik[p,q] = bin_coef[p,q]+ ybar[p,q]*log(P[p,q]) + mbar[p,q]*log(1-P[p,q])+bin_coef[q,p]+ mbar[q,p]*log(P[p,q]) + ybar[q,p]*log(1-P[p,q])
}
}
}
return(sum(llik))
}
llik_over_blocks_f_binomial1(bin_coef1 ,ybar_binom1, mbar_binom1,P)
llik_over_blocks_f_binomial1 = function(bin_coef, ybar, mbar, P){
#llik<- sum(bin_coef+ ybar*log(P) + (mbar)*log(1-P))
llik = matrix(0,K,K)
for(p in 1:K){
for(q in 1:K){
if(q-p==0){
llik[p,q] = bin_coef[p,q]+ ybar[p,q]*log(P[p,q]) + mbar[p,q]*log(1-P[p,q])
}else{
llik[p,q] = bin_coef[p,q]+ ybar[p,q]*log(P[p,q]) + mbar[p,q]*log(1-P[p,q])+
llik[q,p] = bin_coef[q,p]+ mbar[q,p]*log(P[p,q]) + ybar[q,p]*log(1-P[p,q])
}
}
}
return(sum(llik))
}
llik_over_blocks_f_binomial(bin_coef1 ,ybar_binom1, mbar_binom1,P)
#llik<- sum(bin_coef+ ybar*log(P) + (mbar)*log(1-P))
llik = matrix(0,K,K)
for(p in 1:K){
for(q in 1:K){
if(q-p==0){
llik[p,q] = bin_coef[p,q]+ ybar[p,q]*log(P[p,q]) + mbar[p,q]*log(1-P[p,q])
}else{
llik[p,q] = bin_coef[p,q]+ ybar[p,q]*log(P[p,q]) + mbar[p,q]*log(1-P[p,q])
llik[q,p] = bin_coef[q,p]+ mbar[q,p]*log(P[p,q]) + ybar[q,p]*log(1-P[p,q])
}
}
}
bin_coef=bin_coef1
#llik<- sum(bin_coef+ ybar*log(P) + (mbar)*log(1-P))
llik = matrix(0,K,K)
for(p in 1:K){
for(q in 1:K){
if(q-p==0){
llik[p,q] = bin_coef[p,q]+ ybar[p,q]*log(P[p,q]) + mbar[p,q]*log(1-P[p,q])
}else{
llik[p,q] = bin_coef[p,q]+ ybar[p,q]*log(P[p,q]) + mbar[p,q]*log(1-P[p,q])
llik[q,p] = bin_coef[q,p]+ mbar[q,p]*log(P[p,q]) + ybar[q,p]*log(1-P[p,q])
}
}
}
llik_over_blocks_f_binomial1 = function(bin_coef, ybar, mbar, P){
#llik<- sum(bin_coef+ ybar*log(P) + (mbar)*log(1-P))
llik = matrix(0,K,K)
for(p in 1:K){
for(q in 1:K){
if(q-p==0){
llik[p,q] = bin_coef[p,q]+ ybar[p,q]*log(P[p,q]) + mbar[p,q]*log(1-P[p,q])
}else{
llik[p,q] = bin_coef[p,q]+ ybar[p,q]*log(P[p,q]) + mbar[p,q]*log(1-P[p,q])
llik[q,p] = bin_coef[q,p]+ mbar[q,p]*log(P[p,q]) + ybar[q,p]*log(1-P[p,q])
}
}
}
print(llik)
return(sum(llik))
}
llik_over_blocks_f_binomial(bin_coef1 ,ybar_binom1, mbar_binom1,P)
llik_over_blocks_f_binomial1(bin_coef1 ,ybar_binom1, mbar_binom1,P)
llik_over_blocks_f_binomial1 = function(bin_coef, ybar, mbar, P){
#llik<- sum(bin_coef+ ybar*log(P) + (mbar)*log(1-P))
llik = matrix(0,K,K)
for(p in 1:K){
for(q in 1:K){
if(q-p==0){
llik[p,q] = bin_coef[p,q]+ ybar[p,q]*log(P[p,q]) + mbar[p,q]*log(1-P[p,q])
}else{
llik[p,q] = bin_coef[p,q]+ ybar[p,q]*log(P[p,q]) + mbar[p,q]*log(1-P[p,q])+ bin_coef[q,p]+ mbar[q,p]*log(P[p,q]) + ybar[q,p]*log(1-P[p,q])
#llik[q,p] = bin_coef[q,p]+ mbar[q,p]*log(P[p,q]) + ybar[q,p]*log(1-P[p,q])
}
}
}
print(llik)
return(sum(llik))
}
llik_over_blocks_f_binomial1(bin_coef1 ,ybar_binom1, mbar_binom1,P)
llik_over_blocks_f_binomial1 = function(bin_coef, ybar, mbar, P){
#llik<- sum(bin_coef+ ybar*log(P) + (mbar)*log(1-P))
llik = matrix(0,K,K)
for(p in 1:K){
for(q in i:K){
if(q-p==0){
llik[p,q] = bin_coef[p,q]+ ybar[p,q]*log(P[p,q]) + mbar[p,q]*log(1-P[p,q])
}else{
llik[p,q] = bin_coef[p,q]+ ybar[p,q]*log(P[p,q]) + mbar[p,q]*log(1-P[p,q])+ bin_coef[q,p]+ mbar[q,p]*log(P[p,q]) + ybar[q,p]*log(1-P[p,q])
#llik[q,p] = bin_coef[q,p]+ mbar[q,p]*log(P[p,q]) + ybar[q,p]*log(1-P[p,q])
}
}
}
print(llik)
return(sum(llik))
}
llik_over_blocks_f_binomial1(bin_coef1 ,ybar_binom1, mbar_binom1,P)
llik_over_blocks_f_binomial1 = function(bin_coef, ybar, mbar, P){
#llik<- sum(bin_coef+ ybar*log(P) + (mbar)*log(1-P))
llik = matrix(0,K,K)
for(p in 1:K){
for(q in p:K){
if(q-p==0){
llik[p,q] = bin_coef[p,q]+ ybar[p,q]*log(P[p,q]) + mbar[p,q]*log(1-P[p,q])
}else{
llik[p,q] = bin_coef[p,q]+ ybar[p,q]*log(P[p,q]) + mbar[p,q]*log(1-P[p,q])+ bin_coef[q,p]+ mbar[q,p]*log(P[p,q]) + ybar[q,p]*log(1-P[p,q])
#llik[q,p] = bin_coef[q,p]+ mbar[q,p]*log(P[p,q]) + ybar[q,p]*log(1-P[p,q])
}
}
}
print(llik)
return(sum(llik))
}
llik_over_blocks_f_binomial1(bin_coef1 ,ybar_binom1, mbar_binom1,P)
llik_over_blocks_f_binomial1 = function(bin_coef, ybar, mbar, P){
#llik<- sum(bin_coef+ ybar*log(P) + (mbar)*log(1-P))
llik = matrix(0,K,K)
for(p in 1:K){
for(q in p:K){
if(q-p==0){
llik[p,q] = bin_coef[p,q]+ ybar[p,q]*log(P[p,q]) + mbar[p,q]*log(1-P[p,q])
}else{
llik[p,q] = bin_coef[q,p]+ bin_coef[p,q]+(ybar[p,q]+mbar[q,p])*log(P[p,q]) + (mbar[p,q]+ybar[q,p])*log(1-P[p,q])
#llik[q,p] = bin_coef[q,p]+ mbar[q,p]*log(P[p,q]) + ybar[q,p]*log(1-P[p,q])
}
}
}
print(llik)
return(sum(llik))
}
llik_over_blocks_f_binomial1(bin_coef1 ,ybar_binom1, mbar_binom1,P)
llik_over_blocks_f_binomial1 = function(bin_coef, ybar, mbar, P){
#llik<- sum(bin_coef+ ybar*log(P) + (mbar)*log(1-P))
llik = matrix(0,K,K)
for(p in 1:K){
for(q in p:K){
if(q-p==0){
llik[p,q] = bin_coef[p,q]+ ybar[p,q]*log(P[p,q]) + mbar[p,q]*log(1-P[p,q])
}else{
llik[p,q] = bin_coef[q,p]+ bin_coef[p,q]+(ybar[p,q]+mbar[q,p])*log(P[p,q]) + (mbar[p,q]+ybar[q,p])*log(1-P[p,q])
#llik[q,p] = bin_coef[q,p]+ mbar[q,p]*log(P[p,q]) + ybar[q,p]*log(1-P[p,q])
}
}
}
return(sum(llik))
}
llik_over_blocks_f_binomial1(bin_coef1 ,ybar_binom1, mbar_binom1,P)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(RColorBrewer)
source("/Users/lapo_santi/Desktop/Nial/project/simplified model/Functions_priorSST.R")
# Binomial SBM
set.seed(12)
n=20
K=4
a = .70
U = runif(4,0.5,a)
x = rgamma(1 ,shape = 1,scale = 1)
sigma_squared = 0.001
U_k = sort(U)
beta_params = beta_mean_var(U_k,rep(sigma_squared,K) )
a_k = beta_params$alpha
b_k = beta_params$beta
N<- matrix(2,n,n)
diag(N)<-0
P = matrix(0,K,K)
for(k in 0:(K-1)){
for(i in 1:(K-1)){
for(j in (i+1):K){
if((j-i)==k){
P[i,j]= rbeta(1,a_k[k+1],b_k[k+1])
}
}
}
}
P = P +  lower.tri(P)*(1-t(P))
diag(P)=0.5
z = matrix(0,n,1)
z<- sample(1:K, n,replace=T)
z_P<- vec2mat_0_P(z,P)
P_nbyn<- calculate_victory_probabilities(z_P,P)
Y_binom <- matrix(0, n,n)
for(i in 1:n){
for(j in 1:n){
Y_binom[i,j]<- rbinom(1,N[i,j],P_nbyn[i,j])
}
}
Y_binom[lower.tri(Y_binom)] = N[lower.tri(N)] - t(Y_binom)[lower.tri(Y_binom)]
diag(Y_binom)<- 0
Y_binom
log_lik_f_binom = function(N,Y,z,P, directed=T){
z_P<- vec2mat_0_P(z,P)
P_nbyn<- calculate_victory_probabilities(z_P, P)
if(directed==T){
#computing the pairwise log-probabilitiees
bigM = lchoose(N,Y)+(Y* log(P_nbyn)+(N-Y)*log(1 - P_nbyn))
#remember to subtract the diagonal
log_lik= sum(bigM) - sum(diag(bigM))
}else if(directed==F){
bigM = lchoose(N,Y)+(Y* log(P_nbyn)+(N-Y)*log(1 - P_nbyn))
#remember to subtract the diagonal
log_lik= sum(bigM*upper.tri(bigM))
}
return(log_lik)
}
log_lik_f_binom(N,Y_binom,z,P,directed=F)
llik_over_blocks_f_binomial1(bin_coef1 ,ybar_binom1, mbar_binom1,P)
llik_over_blocks_f_binomial1(bin_coef1 ,ybar_binom1, mbar_binom1,P)
log_lik_f_binom(N,Y_binom,z,P,directed=F)
# Binomial SBM
set.seed(12)
n=20
K=4
a = .70
U = runif(4,0.5,a)
x = rgamma(1 ,shape = 1,scale = 1)
sigma_squared = 0.001
U_k = sort(U)
beta_params = beta_mean_var(U_k,rep(sigma_squared,K) )
a_k = beta_params$alpha
b_k = beta_params$beta
N<- matrix(2,n,n)
diag(N)<-0
P = matrix(0,K,K)
for(k in 0:(K-1)){
for(i in 1:(K-1)){
for(j in (i+1):K){
if((j-i)==k){
P[i,j]= rbeta(1,a_k[k+1],b_k[k+1])
}
}
}
}
P = P +  lower.tri(P)*(1-t(P))
diag(P)=0.5
z = matrix(0,n,1)
z<- sample(1:K, n,replace=T)
z_P<- vec2mat_0_P(z,P)
P_nbyn<- calculate_victory_probabilities(z_P,P)
Y_binom <- matrix(0, n,n)
for(i in 1:n){
for(j in 1:n){
Y_binom[i,j]<- rbinom(1,N[i,j],P_nbyn[i,j])
}
}
Y_binom[lower.tri(Y_binom)] = N[lower.tri(N)] - t(Y_binom)[lower.tri(Y_binom)]
diag(Y_binom)<- 0
log_lik_f_binom = function(N,Y,z,P, directed=T){
z_P<- vec2mat_0_P(z,P)
P_nbyn<- calculate_victory_probabilities(z_P, P)
if(directed==T){
#computing the pairwise log-probabilitiees
bigM = lchoose(N,Y)+(Y* log(P_nbyn)+(N-Y)*log(1 - P_nbyn))
#remember to subtract the diagonal
log_lik= sum(bigM) - sum(diag(bigM))
}else if(directed==F){
bigM = lchoose(N,Y)+(Y* log(P_nbyn)+(N-Y)*log(1 - P_nbyn))
#remember to subtract the diagonal
log_lik= sum(bigM*upper.tri(bigM))
}
return(log_lik)
}
# number of victories between block p and block q
ybar_binom1 = t(z_P)%*%(Y_binom*upper.tri(Y_binom))%*%z_P
# number of missed victories between block p and block q
n_minus_y1 <- (N-Y_binom)*upper.tri(N)
# number of missed victories between block p and block q
mbar_binom1<- t(z_P)%*%n_minus_y1%*%z_P
coef1 = lchoose(N, Y_binom)*upper.tri(N)
bin_coef1 <- t(z_P)%*%(coef1)%*%z_P
llik_over_blocks_f_binomial = function(bin_coef, ybar, mbar, P){
#llik<- sum(bin_coef+ ybar*log(P) + (mbar)*log(1-P))
llik = matrix(0,K,K)
for(p in 1:K){
for(q in p:K){
if(q-p==0){
llik[p,q] = bin_coef[p,q]+ ybar[p,q]*log(P[p,q]) + mbar[p,q]*log(1-P[p,q])
}else{
llik[p,q] = bin_coef[q,p]+ bin_coef[p,q]+(ybar[p,q]+mbar[q,p])*log(P[p,q]) + (mbar[p,q]+ybar[q,p])*log(1-P[p,q])
}
}
}
return(sum(llik))
}
llik_over_blocks_f_binomial1(bin_coef1 ,ybar_binom1, mbar_binom1,P)
log_lik_f_binom(N,Y_binom,z,P,directed=F)
