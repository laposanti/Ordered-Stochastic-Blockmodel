results$mean_MSE <-  mean_MSE
burnin_p <- perm.POMM[,,-c(1:10000)]
plotsPOMM = list()
for(i in 1:K) {
for(j in 1:K) {
y_try = data.frame(y = as.vector(burnin_p[i, j,]))
p1 = ggplot(y_try, aes(y)) +
geom_density(fill = "dodgerblue", alpha = 0.5) +
scale_x_log10() +
geom_vline(xintercept = p_true_POMM[i, j], color = "red")+
xlab("probability") +
ylab("Density") +
ggtitle(paste("Density plot of entry ", i, ",", j, sep = ""))
plotsPOMM[[length(plotsPOMM) + 1]] <- p1
}
}
p_combinedPOMM = patchwork::wrap_plots(plotsPOMM, ncol = K, nrow = K)
# Construct the file name using paste() or paste0()
plot_name <- paste0("P_est_","POMM_","K",K,"_M",M,".png")
# Save the plot with the constructed file name
png(plot_name,width = 800, height = 518)
print(p_combinedPOMM)
dev.off()
entries<- which(upper.tri(obj_POMM$p_true),arr.ind = T)
counter5perc=0
counter1perc=0
for(i in 1:nrow(entries)){
lb <- quantile(perm.POMM[entries[i,1],entries[i,2],-c(1:10000)],probs = 0.05)
ub <- quantile(perm.POMM[entries[i,1],entries[i,2],-c(1:10000)], probs = 0.95)
contained5<- obj_POMM$p_true[entries[i,1],entries[i,2]]<ub && obj_POMM$p_true[entries[i,1],entries[i,2]]>lb
counter5perc = counter5perc + contained5
lb <- quantile(perm.POMM[entries[i,1],entries[i,2],-c(1:10000)],probs = 0.01)
ub <- quantile(perm.POMM[entries[i,1],entries[i,2],-c(1:10000)], probs = 0.99)
contained1<- obj_POMM$p_true[entries[i,1],entries[i,2]]<ub && obj_POMM$p_true[entries[i,1],entries[i,2]]>lb
counter1perc = counter1perc + contained1
}
results$counter5perc <- counter5perc/nrow(entries)
results$counter1perc<- counter1perc/nrow(entries)
}
rownames(results) <- paste0(model,"K", K, "_M", M)
return(results)
}
for(i in 1:length(filename)){
a<- obtaining_resultsIII(filename[i],model)
resultsIII_gen<- rbind(resultsIII_gen,a)
}
obtaining_resultsIII<- function(filename,model){
results = data.frame(counter5perc = 0, counter1perc =0 , mean_MSE = 0)
obj_POMM<- readRDS(paste0(data_wd,"/",filename[1]))
print(filename)
K = nrow(obj_POMM$p_true)
M = sum(obj_POMM$Yij_matrix)
#pomm
if(model=="POMM"){
mean_MSE<- mean(abs(MSE_p_matrix(10000,obj_POMM$p_container,p_true = obj_POMM$p_true)[upper.tri(matrix(0,K,K))]))
results$mean_MSE <-  mean_MSE
p_true_POMM <- obj_POMM$p_true
burnin_p <- obj_POMM$p_container[,,-c(1:10000)]
plotsPOMM = list()
for(i in 1:K) {
for(j in 1:K) {
y_try = data.frame(y = as.vector(burnin_p[i, j,]))
p1 = ggplot(y_try, aes(y)) +
geom_density(fill = "dodgerblue", alpha = 0.5) +
scale_x_log10() +
geom_vline(xintercept = obj_POMM$p_true[i, j], color = "red")+
xlab("probability") +
ylab("Density") +
ggtitle(paste("Density plot of entry ", i, ",", j, sep = ""))
plotsPOMM[[length(plotsPOMM) + 1]] <- p1
}
}
p_combinedPOMM = patchwork::wrap_plots(plotsPOMM, ncol = K, nrow = K)
# Construct the file name using paste() or paste0()
plot_name <- paste0("P_est_","POMM_","K",K,"_M",M,".png")
# Save the plot with the constructed file name
png(plot_name,width = 800, height = 518)
print(p_combinedPOMM)
dev.off()
counter5perc=0
counter1perc=0
for(i in 1:nrow(entries)){
lb <- quantile(obj_POMM$p_container[entries[i,1],entries[i,2],-c(1:10000)],probs = 0.05)
ub <- quantile(obj_POMM$p_container[entries[i,1],entries[i,2],-c(1:10000)], probs = 0.95)
contained5<- obj_POMM$p_true[entries[i,1],entries[i,2]]<ub && obj_POMM$p_true[entries[i,1],entries[i,2]]>lb
counter5perc = counter5perc + contained5
lb <- quantile(obj_POMM$p_container[entries[i,1],entries[i,2],-c(1:10000)],probs = 0.01)
ub <- quantile(obj_POMM$p_container[entries[i,1],entries[i,2],-c(1:10000)], probs = 0.99)
contained1<- obj_POMM$p_true[entries[i,1],entries[i,2]]<ub && obj_POMM$p_true[entries[i,1],entries[i,2]]>lb
counter1perc = counter1perc + contained1
}
results$counter5perc <- counter5perc/nrow(entries)
results$counter1perc<- counter1perc/nrow(entries)
}else{
runPOMM<- label.switching(method = 'ECR' ,zpivot = obj_POMM$z_true,z = t(obj_POMM$z_container), K = K)
# apply the permutations returned by typing:
perm.POMM<- permute_array(array_samples = obj_POMM$p_container, perm_matrix = runPOMM$permutations$ECR)
mean_MSE<- mean(abs(MSE_p_matrix(10000,perm.POMM,p_true = obj_POMM$p_true)[upper.tri(matrix(0,K,K))]))
results$mean_MSE <-  mean_MSE
burnin_p <- perm.POMM[,,-c(1:10000)]
plotsPOMM = list()
for(i in 1:K) {
for(j in 1:K) {
y_try = data.frame(y = as.vector(burnin_p[i, j,]))
p1 = ggplot(y_try, aes(y)) +
geom_density(fill = "dodgerblue", alpha = 0.5) +
scale_x_log10() +
geom_vline(xintercept = obj_POMM$p_true[i, j], color = "red")+
xlab("probability") +
ylab("Density") +
ggtitle(paste("Density plot of entry ", i, ",", j, sep = ""))
plotsPOMM[[length(plotsPOMM) + 1]] <- p1
}
}
p_combinedPOMM = patchwork::wrap_plots(plotsPOMM, ncol = K, nrow = K)
# Construct the file name using paste() or paste0()
plot_name <- paste0("P_est_","POMM_","K",K,"_M",M,".png")
# Save the plot with the constructed file name
png(plot_name,width = 800, height = 518)
print(p_combinedPOMM)
dev.off()
entries<- which(upper.tri(obj_POMM$p_true),arr.ind = T)
counter5perc=0
counter1perc=0
for(i in 1:nrow(entries)){
lb <- quantile(perm.POMM[entries[i,1],entries[i,2],-c(1:10000)],probs = 0.05)
ub <- quantile(perm.POMM[entries[i,1],entries[i,2],-c(1:10000)], probs = 0.95)
contained5<- obj_POMM$p_true[entries[i,1],entries[i,2]]<ub && obj_POMM$p_true[entries[i,1],entries[i,2]]>lb
counter5perc = counter5perc + contained5
lb <- quantile(perm.POMM[entries[i,1],entries[i,2],-c(1:10000)],probs = 0.01)
ub <- quantile(perm.POMM[entries[i,1],entries[i,2],-c(1:10000)], probs = 0.99)
contained1<- obj_POMM$p_true[entries[i,1],entries[i,2]]<ub && obj_POMM$p_true[entries[i,1],entries[i,2]]>lb
counter1perc = counter1perc + contained1
}
results$counter5perc <- counter5perc/nrow(entries)
results$counter1perc<- counter1perc/nrow(entries)
}
rownames(results) <- paste0(model,"K", K, "_M", M)
return(results)
}
for(i in 1:length(filename)){
a<- obtaining_resultsIII(filename[i],model)
resultsIII_gen<- rbind(resultsIII_gen,a)
}
resultsIII_gen
resultsIII_gen = data.frame(counter5perc = 0, counter1perc =0 , mean_MSE = 0)
for(i in 1:length(filename)){
a<- obtaining_resultsIII(filename[i],model)
resultsIII_gen<- rbind(resultsIII_gen,a)
}
resultsIII_gen
resultsIII_gen<- resultsIII_gen[-1,]
resultsIII_gen <- round(resultsIII_gen,2)
resultsIII_gen
model<- "POMM"
filename <- list.files(pattern = paste0("True_ModelPOMMEst_model_", model))
print(filename)
#where the data are stored
data_wd<- "/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/POMM_flex/MCMC/results/old_studies"
setwd(data_wd)
getwd()
model<- "POMM"
filename <- list.files(pattern = paste0("True_ModelPOMMEst_model_", model))
print(filename)
for(i in 1:length(filename)){
a<- obtaining_resultsIII(filename[i],"Simple")
resultsIII_gen<- rbind(resultsIII_gen,a)
}
resultsIII_gen
obtaining_resultsIII<- function(filename,model){
results = data.frame(counter5perc = 0, counter1perc =0 , mean_MSE = 0)
obj_POMM<- readRDS(paste0(data_wd,"/",filename[1]))
print(filename)
K = nrow(obj_POMM$p_true)
M = sum(obj_POMM$Yij_matrix)
#pomm
if(model=="POMM"){
mean_MSE<- mean(abs(MSE_p_matrix(10000,obj_POMM$p_container,p_true = obj_POMM$p_true)[upper.tri(matrix(0,K,K))]))
results$mean_MSE <-  mean_MSE
p_true_POMM <- obj_POMM$p_true
burnin_p <- obj_POMM$p_container[,,-c(1:10000)]
plotsPOMM = list()
for(i in 1:K) {
for(j in 1:K) {
y_try = data.frame(y = as.vector(burnin_p[i, j,]))
p1 = ggplot(y_try, aes(y)) +
geom_density(fill = "dodgerblue", alpha = 0.5) +
scale_x_log10() +
geom_vline(xintercept = obj_POMM$p_true[i, j], color = "red")+
xlab("probability") +
ylab("Density") +
ggtitle(paste("Density plot of entry ", i, ",", j, sep = ""))
plotsPOMM[[length(plotsPOMM) + 1]] <- p1
}
}
p_combinedPOMM = patchwork::wrap_plots(plotsPOMM, ncol = K, nrow = K)
# Construct the file name using paste() or paste0()
plot_name <- paste0("P_est_",model,"K",K,"_M",M,".png")
# Save the plot with the constructed file name
png(plot_name,width = 800, height = 518)
print(p_combinedPOMM)
dev.off()
counter5perc=0
counter1perc=0
for(i in 1:nrow(entries)){
lb <- quantile(obj_POMM$p_container[entries[i,1],entries[i,2],-c(1:10000)],probs = 0.05)
ub <- quantile(obj_POMM$p_container[entries[i,1],entries[i,2],-c(1:10000)], probs = 0.95)
contained5<- obj_POMM$p_true[entries[i,1],entries[i,2]]<ub && obj_POMM$p_true[entries[i,1],entries[i,2]]>lb
counter5perc = counter5perc + contained5
lb <- quantile(obj_POMM$p_container[entries[i,1],entries[i,2],-c(1:10000)],probs = 0.01)
ub <- quantile(obj_POMM$p_container[entries[i,1],entries[i,2],-c(1:10000)], probs = 0.99)
contained1<- obj_POMM$p_true[entries[i,1],entries[i,2]]<ub && obj_POMM$p_true[entries[i,1],entries[i,2]]>lb
counter1perc = counter1perc + contained1
}
results$counter5perc <- counter5perc/nrow(entries)
results$counter1perc<- counter1perc/nrow(entries)
}else{
runPOMM<- label.switching(method = 'ECR' ,zpivot = obj_POMM$z_true,z = t(obj_POMM$z_container), K = K)
# apply the permutations returned by typing:
perm.POMM<- permute_array(array_samples = obj_POMM$p_container, perm_matrix = runPOMM$permutations$ECR)
mean_MSE<- mean(abs(MSE_p_matrix(10000,perm.POMM,p_true = obj_POMM$p_true)[upper.tri(matrix(0,K,K))]))
results$mean_MSE <-  mean_MSE
burnin_p <- perm.POMM[,,-c(1:10000)]
plotsPOMM = list()
for(i in 1:K) {
for(j in 1:K) {
y_try = data.frame(y = as.vector(burnin_p[i, j,]))
p1 = ggplot(y_try, aes(y)) +
geom_density(fill = "dodgerblue", alpha = 0.5) +
scale_x_log10() +
geom_vline(xintercept = obj_POMM$p_true[i, j], color = "red")+
xlab("probability") +
ylab("Density") +
ggtitle(paste("Density plot of entry ", i, ",", j, sep = ""))
plotsPOMM[[length(plotsPOMM) + 1]] <- p1
}
}
p_combinedPOMM = patchwork::wrap_plots(plotsPOMM, ncol = K, nrow = K)
# Construct the file name using paste() or paste0()
plot_name <- paste0("P_est_",model,"K",K,"_M",M,".png")
# Save the plot with the constructed file name
png(plot_name,width = 800, height = 518)
print(p_combinedPOMM)
dev.off()
entries<- which(upper.tri(obj_POMM$p_true),arr.ind = T)
counter5perc=0
counter1perc=0
for(i in 1:nrow(entries)){
lb <- quantile(perm.POMM[entries[i,1],entries[i,2],-c(1:10000)],probs = 0.05)
ub <- quantile(perm.POMM[entries[i,1],entries[i,2],-c(1:10000)], probs = 0.95)
contained5<- obj_POMM$p_true[entries[i,1],entries[i,2]]<ub && obj_POMM$p_true[entries[i,1],entries[i,2]]>lb
counter5perc = counter5perc + contained5
lb <- quantile(perm.POMM[entries[i,1],entries[i,2],-c(1:10000)],probs = 0.01)
ub <- quantile(perm.POMM[entries[i,1],entries[i,2],-c(1:10000)], probs = 0.99)
contained1<- obj_POMM$p_true[entries[i,1],entries[i,2]]<ub && obj_POMM$p_true[entries[i,1],entries[i,2]]>lb
counter1perc = counter1perc + contained1
}
results$counter5perc <- counter5perc/nrow(entries)
results$counter1perc<- counter1perc/nrow(entries)
}
rownames(results) <- paste0(model,"K", K, "_M", M)
return(results)
}
resultsII_gen = data.frame(alphaest = 0, alpha0.05 = 0 , alpha0.95 =0 , overlapest =0, overlap0.05 = 0 , overlap0.95 =0)
resultsII_gen<- resultsII_gen[-1,]
for(i in 1:length(filename)){
a<- obtaining_resultsII(filename[i])
resultsII_gen<- rbind(resultsII_gen,a)
}
resultsII_gen
model<- "POMM"
filename <- list.files(pattern = paste0("True_ModelPOMMEst_model_", model))
print(filename)
#uploading the data
results_gen <- data.frame(
MAP = 0,
MINVI = 0,
MISCLASSERROR = 0,
WAIC_est = 0,
WAIC_se = 0
)
#where to save the results
setwd("/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/POMM_flex/MCMC/results/old_studies/plots")
for(i in 1:length(filename)){
a<- obtaining_resultsI(filename[i],model = model)
results_gen<- rbind(results_gen,a)
}
model<- "Simple"
filename <- list.files(pattern = paste0("True_ModelPOMMEst_model_", model))
#where the data are stored
data_wd<- "/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/POMM_flex/MCMC/results/old_studies"
setwd(data_wd)
getwd()
model<- "Simple"
filename <- list.files(pattern = paste0("True_ModelPOMMEst_model_", model))
print(filename)
#where to save the results
setwd("/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/POMM_flex/MCMC/results/old_studies/plots")
for(i in 1:length(filename)){
a<- obtaining_resultsI(filename[i],model = model)
results_gen<- rbind(results_gen,a)
}
results_gen
results_gen = results_gen[-1,]
results_gen = round(results_gen,2)
results_gen
#where the data are stored
data_wd<- "/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/POMM_flex/MCMC/results/old_studies"
setwd(data_wd)
getwd()
model<- "POMM"
filename <- list.files(pattern = paste0("True_ModelSimpleEst_model_", model))
print(filename)
resultsII_gen = data.frame(alphaest = 0, alpha0.05 = 0 , alpha0.95 =0 , overlapest =0, overlap0.05 = 0 , overlap0.95 =0)
resultsII_gen<- resultsII_gen[-1,]
for(i in 1:length(filename)){
a<- obtaining_resultsII(filename[i])
resultsII_gen<- rbind(resultsII_gen,a)
}
results_genII
resultsII_gen
resultsII_gen<- round(resultsII_gen,2)
resultsII_gen
resultsIII_gen = data.frame(p_est = 0, p_est0.05 = 0 , p_est0.95 =0 , mean_MSE = 0)
for(i in 1:length(filename)){
a<- obtaining_resultsII(filename[i])
resultsII_gen<- rbind(resultsII_gen,a)
}
resultsIII_gen
resultsIII_gen = data.frame(counter5perc = 0, counter1perc =0 , mean_MSE = 0)
for(i in 1:length(filename)){
a<- obtaining_resultsIII(filename[i],"Simple")
resultsIII_gen<- rbind(resultsIII_gen,a)
}
resultsIII_gen<- resultsIII_gen[-1,]
resultsIII_gen <- round(resultsIII_gen,2)
resultsIII_gen
model<- "Simple"
filename <- list.files(pattern = paste0("True_ModelSimpleEst_model_", model))
print(filename)
#where to save the results
setwd("/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/POMM_flex/MCMC/results/old_studies/plots")
setwd("/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/POMM_flex/MCMC/results/old_studies/plots")
resultsIII_gen = data.frame(p_est = 0, p_est0.05 = 0 , p_est0.95 =0 , mean_MSE = 0)
for(i in 1:length(filename)){
a<- obtaining_resultsII(filename[i])
resultsII_gen<- rbind(resultsII_gen,a)
}
resultsII_gen<- resultsII_gen[-1,]
resultsIII_gen = data.frame(counter5perc = 0, counter1perc =0 , mean_MSE = 0)
for(i in 1:length(filename)){
a<- obtaining_resultsIII(filename[i],"POMM")
resultsIII_gen<- rbind(resultsIII_gen,a)
}
resultsIII_gen<- resultsIII_gen[-1,]
resultsIII_gen = data.frame(counter5perc = 0, counter1perc =0 , mean_MSE = 0)
for(i in 1:length(filename)){
a<- obtaining_resultsIII(filename[i],"Simple")
resultsIII_gen<- rbind(resultsIII_gen,a)
}
resultsIII_gen<- resultsIII_gen[-1,]
resultsIII_gen <- round(resultsIII_gen,2)
resultsIII_gen
lb <- quantile(perm.POMM[entries[i,1],entries[i,2],-c(1:10000)],probs = 0.05)
ub <- quantile(perm.POMM[entries[i,1],entries[i,2],-c(1:10000)], probs = 0.95)
lb
ub
obj_POMM$p_true[entries[i,1],entries[i,2]]
resultsIII_gen
obtaining_resultsIII<- function(filename,model){
results = data.frame(counter5perc = 0, counter1perc =0 , mean_MSE = 0)
obj_POMM<- readRDS(paste0(data_wd,"/",filename[1]))
print(filename)
K = nrow(obj_POMM$p_true)
M = sum(obj_POMM$Yij_matrix)
entries<- which(upper.tri(obj_POMM$p_true),arr.ind = T)
#pomm
if(model=="POMM"){
mean_MSE<- mean(abs(MSE_p_matrix(10000,obj_POMM$p_container,p_true = obj_POMM$p_true)[upper.tri(matrix(0,K,K))]))
results$mean_MSE <-  mean_MSE
p_true_POMM <- obj_POMM$p_true
burnin_p <- obj_POMM$p_container[,,-c(1:10000)]
plotsPOMM = list()
for(i in 1:K) {
for(j in 1:K) {
y_try = data.frame(y = as.vector(burnin_p[i, j,]))
p1 = ggplot(y_try, aes(y)) +
geom_density(fill = "dodgerblue", alpha = 0.5) +
scale_x_log10() +
geom_vline(xintercept = obj_POMM$p_true[i, j], color = "red")+
xlab("probability") +
ylab("Density") +
ggtitle(paste("Density plot of entry ", i, ",", j, sep = ""))
plotsPOMM[[length(plotsPOMM) + 1]] <- p1
}
}
p_combinedPOMM = patchwork::wrap_plots(plotsPOMM, ncol = K, nrow = K)
# Construct the file name using paste() or paste0()
plot_name <- paste0("P_est_",model,"K",K,"_M",M,".png")
# Save the plot with the constructed file name
png(plot_name,width = 800, height = 518)
print(p_combinedPOMM)
dev.off()
counter5perc=0
counter1perc=0
for(i in 1:nrow(entries)){
lb <- quantile(obj_POMM$p_container[entries[i,1],entries[i,2],-c(1:10000)],probs = 0.05)
ub <- quantile(obj_POMM$p_container[entries[i,1],entries[i,2],-c(1:10000)], probs = 0.95)
contained5<- obj_POMM$p_true[entries[i,1],entries[i,2]]<ub & obj_POMM$p_true[entries[i,1],entries[i,2]]>lb
counter5perc = counter5perc + contained5
lb <- quantile(obj_POMM$p_container[entries[i,1],entries[i,2],-c(1:10000)],probs = 0.01)
ub <- quantile(obj_POMM$p_container[entries[i,1],entries[i,2],-c(1:10000)], probs = 0.99)
contained1<- obj_POMM$p_true[entries[i,1],entries[i,2]]<ub & obj_POMM$p_true[entries[i,1],entries[i,2]]>lb
counter1perc = counter1perc + contained1
}
results$counter5perc <- counter5perc/nrow(entries)
results$counter1perc<- counter1perc/nrow(entries)
}else{
runPOMM<- label.switching(method = 'ECR' ,zpivot = obj_POMM$z_true,z = t(obj_POMM$z_container), K = K)
# apply the permutations returned by typing:
perm.POMM<- permute_array(array_samples = obj_POMM$p_container, perm_matrix = runPOMM$permutations$ECR)
mean_MSE<- mean(abs(MSE_p_matrix(10000,perm.POMM,p_true = obj_POMM$p_true)[upper.tri(matrix(0,K,K))]))
results$mean_MSE <-  mean_MSE
burnin_p <- perm.POMM[,,-c(1:10000)]
plotsPOMM = list()
for(i in 1:K) {
for(j in 1:K) {
y_try = data.frame(y = as.vector(burnin_p[i, j,]))
p1 = ggplot(y_try, aes(y)) +
geom_density(fill = "dodgerblue", alpha = 0.5) +
scale_x_log10() +
geom_vline(xintercept = obj_POMM$p_true[i, j], color = "red")+
xlab("probability") +
ylab("Density") +
ggtitle(paste("Density plot of entry ", i, ",", j, sep = ""))
plotsPOMM[[length(plotsPOMM) + 1]] <- p1
}
}
p_combinedPOMM = patchwork::wrap_plots(plotsPOMM, ncol = K, nrow = K)
# Construct the file name using paste() or paste0()
plot_name <- paste0("P_est_",model,"K",K,"_M",M,".png")
# Save the plot with the constructed file name
png(plot_name,width = 800, height = 518)
print(p_combinedPOMM)
dev.off()
counter5perc=0
counter1perc=0
for(i in 1:nrow(entries)){
lb <- quantile(perm.POMM[entries[i,1],entries[i,2],-c(1:10000)],probs = 0.05)
ub <- quantile(perm.POMM[entries[i,1],entries[i,2],-c(1:10000)], probs = 0.95)
contained5<- obj_POMM$p_true[entries[i,1],entries[i,2]]<ub && obj_POMM$p_true[entries[i,1],entries[i,2]]>lb
counter5perc = counter5perc + contained5
lb <- quantile(perm.POMM[entries[i,1],entries[i,2],-c(1:10000)],probs = 0.01)
ub <- quantile(perm.POMM[entries[i,1],entries[i,2],-c(1:10000)], probs = 0.99)
contained1<- obj_POMM$p_true[entries[i,1],entries[i,2]]<ub && obj_POMM$p_true[entries[i,1],entries[i,2]]>lb
counter1perc = counter1perc + contained1
}
results$counter5perc <- counter5perc/nrow(entries)
results$counter1perc<- counter1perc/nrow(entries)
}
rownames(results) <- paste0(model,"K", K, "_M", M)
return(results)
}
setwd("/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/POMM_flex/MCMC/results/old_studies/plots")
resultsIII_gen = data.frame(p_est = 0, p_est0.05 = 0 , p_est0.95 =0 , mean_MSE = 0)
for(i in 1:length(filename)){
a<- obtaining_resultsII(filename[i])
resultsII_gen<- rbind(resultsII_gen,a)
}
resultsIII_gen = data.frame(counter5perc = 0, counter1perc =0 , mean_MSE = 0)
for(i in 1:length(filename)){
a<- obtaining_resultsIII(filename[i],"Simple")
resultsIII_gen<- rbind(resultsIII_gen,a)
}
resultsIII_gen<- resultsIII_gen[-1,]
resultsIII_gen <- round(resultsIII_gen,2)
resultsIII_gen
obj_POMM<- readRDS(paste0(data_wd,"/",filename[1]))
quantile(obj_POMM$p_container[1,2,],0.05)
quantile(obj_POMM$p_container[1,2,],0.95)
obj_POMM$p_true[1,2]
runPOMM<- label.switching(method = 'ECR' ,zpivot = obj_POMM$z_true,z = t(obj_POMM$z_container), K = K)
# apply the permutations returned by typing:
perm.POMM<- permute_array(array_samples = obj_POMM$p_container, perm_matrix = runPOMM$permutations$ECR)
quantile(perm.POMM[1,2,],0.05)
quantile(perm.POMM,0.95)
obj_POMM$p_true[1,2]
quantile(perm.POMM[1,3],0.95)
quantile(perm.POMM[1,3,],0.95)
quantile(perm.POMM[1,3,],0.05)
obj_POMM$p_true[1,3]
quantile(perm.POMM[2,3,],0.05)
quantile(perm.POMM[2,3,],0.95)
obj_POMM$p_true[2,3]
quantile(perm.POMM[2,3,],0.99)
resultsIII_gen
#where the data are stored
data_wd<- "/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/POMM_flex/MCMC/results/old_studies"
setwd(data_wd)
getwd()
model<- "POMM"
filename <- list.files(pattern = paste0("True_ModelSimpleEst_model_", model))
print(filename)
setwd("/Users/lapo_santi/Desktop/Nial/POMM_pairwise/POMMs/POMM_flex/MCMC/results/old_studies/plots")
resultsIII_gen = data.frame(counter5perc = 0, counter1perc =0 , mean_MSE = 0)
for(i in 1:length(filename)){
a<- obtaining_resultsIII(filename[i],"Simple")
resultsIII_gen<- rbind(resultsIII_gen,a)
}
resultsIII_gen<- resultsIII_gen[-1,]
resultsIII_gen <- round(resultsIII_gen,2)
resultsIII_gen
